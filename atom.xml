<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>点点寒彬</title>
  <subtitle>www.wengyb.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wengyb.com/"/>
  <updated>2016-08-02T09:59:16.000Z</updated>
  <id>http://www.wengyb.com/</id>
  
  <author>
    <name>点点寒彬 | SvenWeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django开发博客（十四）—用户登录和站点统计</title>
    <link href="http://www.wengyb.com/2016/08/02/Django%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E2%80%94%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%92%8C%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1/"/>
    <id>http://www.wengyb.com/2016/08/02/Django开发博客（十四）—用户登录和站点统计/</id>
    <published>2016-08-02T09:56:57.000Z</published>
    <updated>2016-08-02T09:59:16.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-08-02-20160725.jpg&quot; alt=&quot;20160725&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;由于博客一直没有自己的CMS，所以导致博客维护起来有点麻烦，每次我都是去数据库添加文章，太麻烦了，但是之前没有做用户登录系统，就导致了内容的维护很麻烦。&lt;/p&gt;
&lt;p&gt;So，是时候加一个用户系统了&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;同样，思路是非常简单的，网站进行会话校验一般是使用Cookie或者Session。不过Cookie有那么些不安全，加了密的Session比较符合我们的要求。&lt;/p&gt;
&lt;p&gt;实现起来就是加一个登陆页，验证通过就写一个Session，在CMS相关的页面加上一个校验Session的内容就可以了。&lt;/p&gt;
&lt;h2 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h2&gt;&lt;p&gt;前端就是需要找一个你喜欢的页面，网上找一些CMS的模板抄下来就行了。比如我的是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-08-02-14700404397773.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;很简单的一个登陆界面。&lt;/p&gt;
&lt;p&gt;然后你还要准备一个着陆页，登陆成功后往哪里跳转，我是直接跳转CMS的入口页面。&lt;/p&gt;
&lt;p&gt;前端的准备就这些了。&lt;/p&gt;
&lt;h2 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端&quot;&gt;&lt;/a&gt;后端&lt;/h2&gt;&lt;p&gt;主要是Django的后端处理逻辑。分为两点，一个是写Session，另一个是读取Session。&lt;/p&gt;
&lt;h3 id=&quot;写Session&quot;&gt;&lt;a href=&quot;#写Session&quot; class=&quot;headerlink&quot; title=&quot;写Session&quot;&gt;&lt;/a&gt;写Session&lt;/h3&gt;&lt;p&gt;这个动作要放在登录的时候，当登录成功之后，为用户写上session，然后在这个session有效期内，用户就可以对需要权限的页面进行操作了。比如管理CMS什么的。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(request)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; request.method == &lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; request.POST[&lt;span class=&quot;string&quot;&gt;&#39;username&#39;&lt;/span&gt;] != &lt;span class=&quot;string&quot;&gt;&#39;xxxx&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; render(request, &lt;span class=&quot;string&quot;&gt;&#39;blog/login.html&#39;&lt;/span&gt;, &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Errmsg&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;用户名错误&quot;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; request.POST[&lt;span class=&quot;string&quot;&gt;&#39;password&#39;&lt;/span&gt;] != &lt;span class=&quot;string&quot;&gt;&quot;xxxx&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; render(request, &lt;span class=&quot;string&quot;&gt;&#39;blog/login.html&#39;&lt;/span&gt;, &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Errmsg&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;密码错误&quot;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        request.session[&lt;span class=&quot;string&quot;&gt;&#39;user&#39;&lt;/span&gt;] = request.POST[&lt;span class=&quot;string&quot;&gt;&#39;username&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; HttpResponseRedirect(&lt;span class=&quot;string&quot;&gt;&#39;/add_article/&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; render(request, &lt;span class=&quot;string&quot;&gt;&#39;blog/login.html&#39;&lt;/span&gt;, &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Errmsg&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;OK&quot;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的验证逻辑是可拓展的，我这里的演示代码是直接写死，正常写这部分应该去数据库校验。最后的session就是登陆的用户名，这个用户名会存储在Django默认的一个django_session的表里面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-08-02-14701144831199.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;就像这样存储。&lt;/p&gt;
&lt;h3 id=&quot;session有效期&quot;&gt;&lt;a href=&quot;#session有效期&quot; class=&quot;headerlink&quot; title=&quot;session有效期&quot;&gt;&lt;/a&gt;session有效期&lt;/h3&gt;&lt;p&gt;session都有一个有效期，我们可以在项目的&lt;code&gt;settings.py&lt;/code&gt;文件中设置有效期。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SESSION_SAVE_EVERY_REQUEST = True&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表示开启session有效期设置的功能。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SESSION_COOKIE_AGE = 60*60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表示session有效期为60S*60，也就是1小时。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SESSION_EXPIRE_AT_BROWSER_CLOSE = True&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表示关闭浏览器后session就失效。&lt;/p&gt;
&lt;h3 id=&quot;读取session&quot;&gt;&lt;a href=&quot;#读取session&quot; class=&quot;headerlink&quot; title=&quot;读取session&quot;&gt;&lt;/a&gt;读取session&lt;/h3&gt;&lt;p&gt;读取session就很简单了，在需要session认证的页面上加上这么一段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user = request.session.get(&lt;span class=&quot;string&quot;&gt;&#39;user&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; user != &lt;span class=&quot;string&quot;&gt;&quot;xxxx&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; HttpResponseRedirect(&lt;span class=&quot;string&quot;&gt;&#39;/authorlogin/&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同理，这里最需要去数据库校验。&lt;/p&gt;
&lt;h2 id=&quot;站点统计&quot;&gt;&lt;a href=&quot;#站点统计&quot; class=&quot;headerlink&quot; title=&quot;站点统计&quot;&gt;&lt;/a&gt;站点统计&lt;/h2&gt;&lt;p&gt;站点统计有两个方案，一个是第三方，另一个是自己写。&lt;/p&gt;
&lt;p&gt;第三方比较成熟的百度、腾讯等统计都非常方便，不过后续我要自己写一个cms，这些第三方统计的数据我们都拿不过来，所以自己能写一个最好。&lt;/p&gt;
&lt;p&gt;同样，我提供的也是一个思路。就是在页面载入的时候发送一次请求，数据库记录这次请求，就能记录网页被打开多少次了，深入的统计，当然还需要一个数据库来支持。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-08-02-20160725.jpg&quot; alt=&quot;20160725&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;由于博客一直没有自己的CMS，所以导致博客维护起来有点麻烦，每次我都是去数据库添加文章，太麻烦了，但是之前没有做用户登录系统，就导致了内容的维护很麻烦。&lt;/p&gt;
&lt;p&gt;So，是时候加一个用户系统了&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.wengyb.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://www.wengyb.com/tags/python/"/>
    
      <category term="Django" scheme="http://www.wengyb.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>从报告老板看UGC到PGC</title>
    <link href="http://www.wengyb.com/2016/07/25/%E4%BB%8E%E6%8A%A5%E5%91%8A%E8%80%81%E6%9D%BF%E7%9C%8BUGC%E5%88%B0PGC/"/>
    <id>http://www.wengyb.com/2016/07/25/从报告老板看UGC到PGC/</id>
    <published>2016-07-25T01:56:13.000Z</published>
    <updated>2016-07-25T02:05:28.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-25-water-lily-1510707_1920.jpg&quot; alt=&quot;water-lily-1510707_1920&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;今天看完《报告老板》第二季的最后一集，片尾导演说不会出第三季了，令人感到惋惜，我还是挺喜欢这种短片风格的小视频。顺手搜了一下创作公司万合天宜，然后也顺带看了看UGC和PGC&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;二&quot;&gt;&lt;a href=&quot;#二&quot; class=&quot;headerlink&quot; title=&quot;二&quot;&gt;&lt;/a&gt;二&lt;/h2&gt;&lt;p&gt;UGC就是用户贡献内容，可以说现在我们看到的所有社区，都是从UGC发展而来，比如起点、优酷土豆、豆瓣、知乎、雪球、天涯、微博、斗鱼等。&lt;/p&gt;
&lt;p&gt;PGC就是专业贡献内容，PGC可以说是UGC发展到一定阶段的产物。举个例子，我在某个社区发表的视频或者观点经常被多人关注、点赞。那么我就会重视我发表的内容，让内容有一定的专业深度，慢慢的就变成了一个PGC。&lt;/p&gt;
&lt;p&gt;顺带说一句，今天特别火的IP，其实就是PGC产生的一个东东。&lt;/p&gt;
&lt;h2 id=&quot;三&quot;&gt;&lt;a href=&quot;#三&quot; class=&quot;headerlink&quot; title=&quot;三&quot;&gt;&lt;/a&gt;三&lt;/h2&gt;&lt;p&gt;UGC和PGC的关系，我认为应该是相辅相成的，UGC负责内容的广度，而PGC负责内容的深度。&lt;/p&gt;
&lt;p&gt;在各大社区都在不停的论证着这种模式，视频网站不用说，完全是按照这个方式来运作的，从全民拍客，到原创内容扶持计划，再到巨额版权购买，最后到自制内容，再对这些PGC进行推广和深度挖掘。比如现在为人熟知的王尼玛、罗振宇、白客等。&lt;/p&gt;
&lt;h2 id=&quot;四&quot;&gt;&lt;a href=&quot;#四&quot; class=&quot;headerlink&quot; title=&quot;四&quot;&gt;&lt;/a&gt;四&lt;/h2&gt;&lt;p&gt;UGC能产生PGC，反之PGC能够带来UGC。&lt;/p&gt;
&lt;p&gt;知乎虽然火爆，但是上线初期，也遇到了很大的问题。知乎的用户大部分是IT、互联网、金融行业的。如果没有某些行动，知乎迟早会变成小众的社区。在维护原有活跃的同时，知乎开始引进一些其他行业的PGC，打开知名度之后，再对这些PGC进行运营，比如知乎日报、知乎周刊、知乎专栏等。慢慢的通过PGC来吸引各行各业的用户，才发展到现在的样子。&lt;/p&gt;
&lt;h2 id=&quot;五&quot;&gt;&lt;a href=&quot;#五&quot; class=&quot;headerlink&quot; title=&quot;五&quot;&gt;&lt;/a&gt;五&lt;/h2&gt;&lt;p&gt;发展到今天，已经由原来的UGC为主变成了PGC为主，由于PGC有巨大的用户粘性，平台不可避免的就会与PGC产生矛盾。PGC影响力还小的时候，平台会扶植它，它也会静静的满足平台的要求，为平台提供优质的内容。当PGC达到一定规模之后，慢慢的就有话语权了，这时平台发现难以掌控这些PGC了，萌生的想法就是自己来做PGC，而这些自制的PGC又容易与原有的PGC产生矛盾。&lt;/p&gt;
&lt;p&gt;看看熊猫TV的发展就知道了，后发展的熊猫TV与前辈斗鱼、战旗、火猫比起来，唯一的优势就是老板钱多，培养一个人气主播需要投入很多时间和资源，有钱就直接去成熟的平台把大主播挖来。比如一开始的2009、若风、囚徒、以及后来的Zhou，SOL君，安德罗妮。这些大主播直接带来了巨量的用户。后续又进军娱乐圈，周杰伦、林俊杰、Angelababy等巨星的加盟，又带来了一大批用户，从此熊猫TV成为了一线的主播平台。&lt;/p&gt;
&lt;h2 id=&quot;六&quot;&gt;&lt;a href=&quot;#六&quot; class=&quot;headerlink&quot; title=&quot;六&quot;&gt;&lt;/a&gt;六&lt;/h2&gt;&lt;p&gt;人们的要求是不断提高的，原来的UGC质量参差不齐，于是高质量的PGC应运而生。一个好的平台固然和赚钱，一个优质的PGC又何尝不能赚大钱呢？&lt;/p&gt;
&lt;p&gt;每个发展阶段都有一些平台应运而生，也许一个面（平台）是非常大的商机，也许一个点（PGC）也可以成为一个巨大的商机。&lt;/p&gt;
&lt;h2 id=&quot;七&quot;&gt;&lt;a href=&quot;#七&quot; class=&quot;headerlink&quot; title=&quot;七&quot;&gt;&lt;/a&gt;七&lt;/h2&gt;&lt;p&gt;最后说一句，现在要发展平台，最直接最快捷的方式，就是砸钱把超级PGC的独家弄到手，另一种方式就是通过强大的渠道导流。两种方式都不做，在现在的时代，还是别浪费时间搞平台了，没戏！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-25-water-lily-1510707_1920.jpg&quot; alt=&quot;water-lily-1510707_1920&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;今天看完《报告老板》第二季的最后一集，片尾导演说不会出第三季了，令人感到惋惜，我还是挺喜欢这种短片风格的小视频。顺手搜了一下创作公司万合天宜，然后也顺带看了看UGC和PGC&lt;br&gt;
    
    </summary>
    
      <category term="MyTalk" scheme="http://www.wengyb.com/categories/MyTalk/"/>
    
    
      <category term="个人杂谈" scheme="http://www.wengyb.com/tags/%E4%B8%AA%E4%BA%BA%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Django博客开发（十三）—一个简单的站内搜索</title>
    <link href="http://www.wengyb.com/2016/07/24/Django%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E2%80%94%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/"/>
    <id>http://www.wengyb.com/2016/07/24/Django博客开发（十三）—一个简单的站内搜索/</id>
    <published>2016-07-24T03:11:45.000Z</published>
    <updated>2016-07-24T03:12:24.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-24-20160714.jpg&quot; alt=&quot;20160714&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近在努力的翻译Apple的测试文档，英文差果然是一个硬伤。&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;博客内容越来越多了，慢慢的发现有时候需要一个搜索引擎来处理一些搜索的要求。当然，不需要那么复杂的逻辑，我们的博客只需要一个很小很小的搜索引擎，甚至不需要很高大上的算法。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;PS：百度站内搜索也是一个解决方案，不过用它的搜索，整个网站风格就变了，所以还是决定自己写一个。&lt;/p&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;思路其实很简单，把关键字拿去比对标题和内容就好了，比如输入一个关键字，先去把包含这个关键字的标题的文章抓出来，再把内容包含该关键字的文章，去重一下就OK了。&lt;/p&gt;
&lt;p&gt;最初的思路是抓出来去重，后来我实践中试了一下，搜索有点慢，我就做了一下优化处理，在判断标题的时候也判断内容，如果标题不存在，内容存在，就放到搜索结果中，这样就不用去重处理了。&lt;/p&gt;
&lt;h2 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h2&gt;&lt;p&gt;前端首先要放一个搜索框出来，提供一个输入的地方。&lt;/p&gt;
&lt;p&gt;还要有一个搜索结果的展示页。这个展示页效果大概是这样的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-24-27659CDC-D026-433A-8D9F-78E468D65805.png&quot; alt=&quot;27659CDC-D026-433A-8D9F-78E468D65805&quot;&gt;&lt;/p&gt;
&lt;p&gt;导航页和右侧的边栏是直接从&lt;code&gt;base.html&lt;/code&gt;中继承过来的，完全不用动，那么其实就是增加一个搜索数量，还有搜索结果。&lt;/p&gt;
&lt;p&gt;前端的代码长这样：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% extends &quot;blog/base.html&quot; %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% block bodycontent %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;% if SearchStatus == &#39;Error&#39; %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;div class=&quot;well fade in daytips&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot;&amp;gt;×&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;strong&amp;gt;作者水平有限,并没有关于&amp;lt;font color=&quot;red&quot;&amp;gt;&amp;lt;b&amp;gt;&quot;&amp;#123;&amp;#123; keyword &amp;#125;&amp;#125;&quot;&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;的内容,请换一个词试试&amp;lt;/strong&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;% endif %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;% if SearchStatus == &#39;Success&#39; %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;div class=&quot;well fade in daytips&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;strong&amp;gt;关于&amp;lt;font color=&quot;red&quot;&amp;gt;&amp;lt;b&amp;gt;&quot;&amp;#123;&amp;#123; keyword &amp;#125;&amp;#125;&quot;&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;的搜索结果一共有&amp;lt;font&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    color=&quot;red&quot;&amp;gt;&amp;lt;b&amp;gt;&quot;&amp;#123;&amp;#123; ResultAmount &amp;#125;&amp;#125;&quot;&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;条&amp;lt;/strong&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;div id=&quot;article-list&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;% for x in SearchResult %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;article class=&quot;excerpt excerpt-first&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;header&amp;gt;&amp;lt;a class=&quot;cat&quot; href=&quot;#&quot; id=&quot;wybtype&quot;&amp;gt; &amp;#123;&amp;#123; x.blog_type &amp;#125;&amp;#125; &amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;h2&amp;gt;&amp;lt;a class=&quot;gotoArchive&quot; href=&quot;&amp;#123;% url &#39;article&#39; x.id %&amp;#125;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               title=&quot;&amp;#123;&amp;#123; x.blog_title &amp;#125;&amp;#125;&quot;&amp;gt;&amp;#123;&amp;#123; x.blog_title &amp;#125;&amp;#125;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;/header&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;p class=&quot;meta&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;span class=&quot;posttime&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#123;&amp;#123; x.blog_timestamp &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;span class=&quot;viewnum&quot;&amp;gt;浏览(&amp;lt;a href=&quot;#&quot;&amp;gt;&amp;#123;&amp;#123; x.blog_clicknum &amp;#125;&amp;#125;&amp;lt;/a&amp;gt;)&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;p class=&quot;note&quot;&amp;gt;&amp;#123;&amp;#123; x.blog_body | slice:&#39;:300&#39; &amp;#125;&amp;#125;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;footer class=&quot;entry-footer&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;a class=&quot;more-link gotoArchive&quot; rel=&quot;nofollow&quot; href=&quot;&amp;#123;% url &#39;article&#39; x.id %&amp;#125;&quot;&amp;gt;继续阅读 »&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;lt;/footer&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;/article&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;% endfor %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;% endif %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% endblock %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;展示的时候要考虑两种情况，如果没有结果，要给一个友好的提示，比如我代码中这样的。&lt;/p&gt;
&lt;p&gt;有搜索结果，就要告诉访问者，搜索的关键字是什么，总共有多少结果。&lt;/p&gt;
&lt;p&gt;那么问题来了，要从后端获取哪些数据？&lt;/p&gt;
&lt;h2 id=&quot;后端处理&quot;&gt;&lt;a href=&quot;#后端处理&quot; class=&quot;headerlink&quot; title=&quot;后端处理&quot;&gt;&lt;/a&gt;后端处理&lt;/h2&gt;&lt;p&gt;&lt;code&gt;url&lt;/code&gt;就不说了，要交互肯定是需要一个&lt;code&gt;search&lt;/code&gt;的url。&lt;/p&gt;
&lt;p&gt;逻辑处理大概是这样的，先获取前端送过来的关键字，然后用这个关键字对数据库进行全部搜索，包括标题和内容。把符合条件的文章放到一个列表中。最后返回的时候，这个列表的长度就是记录数。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get_search&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(request)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    keyword = request.POST[&lt;span class=&quot;string&quot;&gt;&#39;searchWords&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    allArticle = BlogBody.objects.all()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SearchResult = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; allArticle:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; keyword &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; x.blog_title:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            SearchResult.append(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; keyword &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; x.blog_body:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            SearchResult.append(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SearchStatus = &lt;span class=&quot;string&quot;&gt;&quot;Error&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; len(SearchResult) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Success&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ResultAmount = len(SearchResult)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; render(request, &lt;span class=&quot;string&quot;&gt;&#39;blog/search.html&#39;&lt;/span&gt;, &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;keyword&quot;&lt;/span&gt;: keyword,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                &lt;span class=&quot;string&quot;&gt;&quot;SearchResult&quot;&lt;/span&gt;: SearchResult,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                &lt;span class=&quot;string&quot;&gt;&quot;SearchStatus&quot;&lt;/span&gt;: SearchStatus,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                &lt;span class=&quot;string&quot;&gt;&quot;ResultAmount&quot;&lt;/span&gt;: ResultAmount&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h2&gt;&lt;p&gt;做的东西是很简单，但是在博客数量大到一定程度的时候，性能会比较差，所以后续可能要对搜索的逻辑做一下优化。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-24-20160714.jpg&quot; alt=&quot;20160714&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近在努力的翻译Apple的测试文档，英文差果然是一个硬伤。&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;博客内容越来越多了，慢慢的发现有时候需要一个搜索引擎来处理一些搜索的要求。当然，不需要那么复杂的逻辑，我们的博客只需要一个很小很小的搜索引擎，甚至不需要很高大上的算法。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.wengyb.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://www.wengyb.com/tags/python/"/>
    
      <category term="Django" scheme="http://www.wengyb.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>[译]《Testing with Xcode》第二章——Testing Basics</title>
    <link href="http://www.wengyb.com/2016/07/20/Testing-Basics/"/>
    <id>http://www.wengyb.com/2016/07/20/Testing-Basics/</id>
    <published>2016-07-19T16:01:10.000Z</published>
    <updated>2016-07-19T16:02:34.000Z</updated>
    
    <content type="html">&lt;p&gt;原文地址：&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/03-testing_basics.html#//apple_ref/doc/uid/TP40014132-CH3-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/library/prerelease/content/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/03-testing_basics.html#//apple_ref/doc/uid/TP40014132-CH3-SW1&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;文章导读&quot;&gt;&lt;a href=&quot;#文章导读&quot; class=&quot;headerlink&quot; title=&quot;文章导读&quot;&gt;&lt;/a&gt;文章导读&lt;/h2&gt;&lt;p&gt;本文是纯理论片，介绍了测试的基础概念。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;声明&quot;&gt;&lt;a href=&quot;#声明&quot; class=&quot;headerlink&quot; title=&quot;声明&quot;&gt;&lt;/a&gt;声明&lt;/h2&gt;&lt;p&gt;文章翻译自Apple官方文档《Testing with Xcode》，不保证每个字都能翻译的精准，如有翻译错误，请留言指出，不胜感激。&lt;/p&gt;
&lt;p&gt;本文由于是纯理论，翻译起来非常生硬，大概意思应该是能看懂的，语言上可能组织不当，我已经约了一个精通英语的朋友，等他有时间会帮我校对，现在就请大家将就着看吧。&lt;/p&gt;
&lt;h1 id=&quot;Testing-Basics-测试基础&quot;&gt;&lt;a href=&quot;#Testing-Basics-测试基础&quot; class=&quot;headerlink&quot; title=&quot;Testing Basics(测试基础)&quot;&gt;&lt;/a&gt;Testing Basics(测试基础)&lt;/h1&gt;&lt;p&gt;测试是你写的代码或者代码库的代码运行在App中，获取结果来比对预期的结果，成功或者失败。测试需要检查经过一系列操作后，变量变化的情况。当涉及到边界等情况，能跑出一个特别的结果。对于性能测试，衡量标准就是你完成一系列运行的最大次数。&lt;/p&gt;
&lt;h2 id=&quot;Defining-Test-Scope（定义测试范围）&quot;&gt;&lt;a href=&quot;#Defining-Test-Scope（定义测试范围）&quot; class=&quot;headerlink&quot; title=&quot;Defining Test Scope（定义测试范围）&quot;&gt;&lt;/a&gt;Defining Test Scope（定义测试范围）&lt;/h2&gt;&lt;p&gt;一个软件是由很多部分构成的，意味着小的元素放在一起组成一个大的。当项目的目标和需求都被满足了，高等级的元素有着非常实用性的意义。好的测试需要覆盖程序所有等级。XCTest允许为程序所有等级的元素编写测试用例。&lt;/p&gt;
&lt;p&gt;测试用例的构成由你定义。可以是一个类中的方法，或者是一系列你认为必要的方法。例如，它可以是一个计算的操作，就像在第一章QuickStart中例子介绍的计算类型的app那样。你需要用不同的方法来区别&lt;code&gt;TableView&lt;/code&gt;和你代码中数据结构定义的名字。它们中的每一个方法都意味着测试app实用功能。元素测试的行为可以有一个确定的结果，成功或者失败。&lt;/p&gt;
&lt;p&gt;app元素的行为你细分的越多。在你的项目增长和变化过程中，就能越有效的测试代码的行为是否符合标准。在大型的项目中，有非常多的元素，你需要运行非常大量的测试代码去完全的测试程序。如果可能，测试用例需要被设计的执行非常快速。但是某些测试用例必须要非常大而且执行的很慢。小而快速的执行测试可以经常的执行，很简单的定位，帮忙诊断和修复问题失败的地方。&lt;/p&gt;
&lt;p&gt;为一个项目设计单元测试时基于测试驱动开发——一种写代码的方式，在写功能代码之前先写测试逻辑的代码。这种开发方式能够让你代码在实施之前更符合需求和边缘情况的规范。当你下次执行测试的时候，你可以很自信的修改你的代码，因为任何变化都在于其的行为中。&lt;/p&gt;
&lt;p&gt;当然如果你不使用测试驱动开发的方式，测试也能帮你减少开发新功能时引入新的bug。当你修复bug时，你可以增加测试用例来证实缺陷被修复了。测试需要执行你的代码。寻找成功或者失败的情况，来覆盖所有的边界情况。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;注意： 如果原来没有测试的项目增加测试用例，可能需要重新设计部分代码来让测试更容易实施。&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/A1-guidelines_writing_testable_code.html#//apple_ref/doc/uid/TP40014132-CH8-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; Appendix A: Writing Testable Code&lt;/a&gt;为你编写测试代码提供了简单的指南，你可能会找到一些有用的东西&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;你的app的任意两个不同的单元可能会互相影响，由于一些类型的测试需要执行很长的时间，你最好周期性的运行他们或者只在一个服务商运行。稍后你会看到下一章，你可以安排你的测试用例，使用不同方式执行来适应不同的需求。&lt;/p&gt;
&lt;h2 id=&quot;Performance-Testing（性能测试）&quot;&gt;&lt;a href=&quot;#Performance-Testing（性能测试）&quot; class=&quot;headerlink&quot; title=&quot;Performance Testing（性能测试）&quot;&gt;&lt;/a&gt;Performance Testing（性能测试）&lt;/h2&gt;&lt;p&gt;单元测试可以在测试自然环境下的功能，或者性能。XCTest提供了API来衡量性能指标。让你能够和功能测试一样的跟踪性能改善的情况。&lt;/p&gt;
&lt;p&gt;当执行性能测试的时候，需要提供一个成功或者失败的结果，一个测试用例需要有一个基线来评估。基线市值程序运行十次结果的平均值。测试结果高于基线时间很多的用例要被报告为失败。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;注意：你第一次运行性能测试的时候，XCTest总会给一个失败的结果，是由于基线还不知道。如果你有接受了某一次性能的指标可以当成基线，XCTest会在报告中评估结果是成功或者失败，然后提供给你测试结果的细节。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;User-Interface-Testing（界面测试）&quot;&gt;&lt;a href=&quot;#User-Interface-Testing（界面测试）&quot; class=&quot;headerlink&quot; title=&quot;User Interface Testing（界面测试）&quot;&gt;&lt;/a&gt;User Interface Testing（界面测试）&lt;/h2&gt;&lt;p&gt;到目前为止，讨论的功能和性能测试，通常被称为单元测试。其中的“单元”取决于你对功能细分的颗粒度。单元测试主要关心的是符合预期的组件，或者与其他组件交互的预期行为。从设计的角度来看，单元测试可以在开发项目的时候，就从内部检查，实现你的意图。&lt;/p&gt;
&lt;p&gt;用户通过界面来与你的代码进行交互。用户界面的交互一般来说是比较高级的行为。使用外部的界面来操作几个组件来实现app的功能。如果没有特殊的设计来操作app外部会话，要想通过单元测试来测试用户通过界面执行的方法是非常困难的。这些特殊的设计被称为“UI测试”。&lt;/p&gt;
&lt;p&gt;UI测试就像用户操作一样，测试app的表面层。他们让你写测试用例，发送模拟的时间给系统和界面的对象，捕捉这些对象的响应，然后就像你做单元测试一样测试响应的正确性是否符合预期。&lt;/p&gt;
&lt;h2 id=&quot;App-and-Library-Tests（App和库测试？）&quot;&gt;&lt;a href=&quot;#App-and-Library-Tests（App和库测试？）&quot; class=&quot;headerlink&quot; title=&quot;App and Library Tests（App和库测试？）&quot;&gt;&lt;/a&gt;App and Library Tests（App和库测试？）&lt;/h2&gt;&lt;p&gt;Xcode提供了两种单元测试的会话，App测试和库测试。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;app测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;App测试检查app中代码行为的正确性，就像例子中的计算器app计算的操作一样。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;库测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;库测试检查代码在动态库和框架中行为的正确性，而不依赖于他们在程序运行时使用的框架。进行库测试，你可以构建单元测试来测试库的组件。&lt;/p&gt;
&lt;h2 id=&quot;XCTest——the-Xcode-Testing-Framework（Xcode测试框架）&quot;&gt;&lt;a href=&quot;#XCTest——the-Xcode-Testing-Framework（Xcode测试框架）&quot; class=&quot;headerlink&quot; title=&quot;XCTest——the Xcode Testing Framework（Xcode测试框架）&quot;&gt;&lt;/a&gt;XCTest——the Xcode Testing Framework（Xcode测试框架）&lt;/h2&gt;&lt;p&gt;从Xcode5开始包含该了XCTest，是提供给你的测试框架。&lt;/p&gt;
&lt;p&gt;考虑到版本的一致性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In Xcode 5, XCTest is compatible with running on OS X v10.8 and OS X v10.9, and with iOS 7 and later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In Xcode 6, XCTest is compatible with running on OS X v10.9 and OS X v10.10, and with iOS 6 and later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In Xcode 7, XCTest is compatible with running on OS X v10.10 and OS X v10.11, and with iOS 6 and later.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;UI测试在OS X v10.11和IOS9之后支持运行，可以运行在模拟器和设备上。&lt;/p&gt;
&lt;p&gt;更多详细的版本信息，请看 &lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/DeveloperTools/RN-Xcode/Introduction.html#//apple_ref/doc/uid/TP40001051&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xcode Release Notes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Xcode把&lt;code&gt;XCTest.framework&lt;/code&gt;收入在你的项目中。这个框架提供了让你设计测试并且在你的代码中运行他们的接口。获取更多有关于XCTest测试框架的信息，请看&lt;em&gt;XCTest Framework Reference&lt;/em&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;注意：Xcode包含了已经存在OCUnit test项目的更新迁移方法，获取更多信息请看&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/A2-transitioning_ocunit_to_xctest.html#//apple_ref/doc/uid/TP40014132-CH10-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Appendix B: Transitioning from OCUnit to XCTest&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Where-to-Start-When-Testing（当测试的时候从哪里开始）&quot;&gt;&lt;a href=&quot;#Where-to-Start-When-Testing（当测试的时候从哪里开始）&quot; class=&quot;headerlink&quot; title=&quot;Where to Start When Testing（当测试的时候从哪里开始）&quot;&gt;&lt;/a&gt;Where to Start When Testing（当测试的时候从哪里开始）&lt;/h2&gt;&lt;p&gt;当你开始创建测试的时候，记住下列几个建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当创建单元测试的时候，重点测试你代码中最基础的功能，模型中与控制器交互的类和方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个高级的程序框架，通常会有模型，视图和控制器类。这是大多数与Cocoa和Cocoa Touch工作中最熟悉的设计模式。如果你需要写的测试要覆盖所有的模型类，在你测以你的方式测试控制器类等app复杂部分之前，你需要确定你的app是容易被测试。&lt;/p&gt;
&lt;p&gt;作为一个起点，如果你正在编写一个测试框架或者库，你最好从你API的表面开始，从那里，你的工作方式就是内部类。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当创建UI测试的时候，要考虑大部分常见的工作流。考虑当用户开始使用app的时候会从哪里开始，UI层会马上执行哪些进程。使用UI录制是一个很好的方式来捕获用户一些列行为到测试方法中，这些测试方法经过扩展，可以很容易的正确的实现测试和性能测试。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种UI测试倾向于一个粗颗粒度的测试，每个测试可能会跨越多个子系统。他们会返回很多信息让你难以分析。所以你和你的UI测试套件工作的时候，你最要细分每个测试，以便更清晰的反映某个子系统的行为。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;原文地址：&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/03-testing_basics.html#//apple_ref/doc/uid/TP40014132-CH3-SW1&quot;&gt;https://developer.apple.com/library/prerelease/content/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/03-testing_basics.html#//apple_ref/doc/uid/TP40014132-CH3-SW1&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;文章导读&quot;&gt;&lt;a href=&quot;#文章导读&quot; class=&quot;headerlink&quot; title=&quot;文章导读&quot;&gt;&lt;/a&gt;文章导读&lt;/h2&gt;&lt;p&gt;本文是纯理论片，介绍了测试的基础概念。&lt;br&gt;
    
    </summary>
    
      <category term="AboutTest" scheme="http://www.wengyb.com/categories/AboutTest/"/>
    
    
      <category term="测试" scheme="http://www.wengyb.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="IOS" scheme="http://www.wengyb.com/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title>[译]《Testing with Xcode》第一章——QuickStart</title>
    <link href="http://www.wengyb.com/2016/07/18/%E8%AF%91-%E3%80%8ATesting-with-Xcode%E3%80%8B%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94QuickStart/"/>
    <id>http://www.wengyb.com/2016/07/18/译-《Testing-with-Xcode》第一章——QuickStart/</id>
    <published>2016-07-17T16:20:32.000Z</published>
    <updated>2016-07-17T16:22:38.000Z</updated>
    
    <content type="html">&lt;p&gt;原文地址：&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/02-quick_start.html#//apple_ref/doc/uid/TP40014132-CH2-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/library/prerelease/content/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/02-quick_start.html#//apple_ref/doc/uid/TP40014132-CH2-SW1&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;文章导读&quot;&gt;&lt;a href=&quot;#文章导读&quot; class=&quot;headerlink&quot; title=&quot;文章导读&quot;&gt;&lt;/a&gt;文章导读&lt;/h2&gt;&lt;p&gt;本篇介绍了Xcode执行测试的方法，说明了Xcode工具如何新建、执行一个测试用例。&lt;/p&gt;
&lt;p&gt;看完之后你能学习到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如何使用Xcode来创建一个测试用例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何执行测试用例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何观察Xcode的测试结果&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;声明&quot;&gt;&lt;a href=&quot;#声明&quot; class=&quot;headerlink&quot; title=&quot;声明&quot;&gt;&lt;/a&gt;声明&lt;/h2&gt;&lt;p&gt;文章翻译自Apple官方文档《Testing with Xcode》，不保证每个字都能翻译的精准，如有翻译错误，请留言指出，不胜感激。&lt;/p&gt;
&lt;h1 id=&quot;QuickStart&quot;&gt;&lt;a href=&quot;#QuickStart&quot; class=&quot;headerlink&quot; title=&quot;QuickStart&quot;&gt;&lt;/a&gt;QuickStart&lt;/h1&gt;&lt;p&gt;这个快速开始是为了告诉你，你可以很容易的给你开发的软件做一些必须的测试。&lt;/p&gt;
&lt;h2 id=&quot;介绍测试导航菜单&quot;&gt;&lt;a href=&quot;#介绍测试导航菜单&quot; class=&quot;headerlink&quot; title=&quot;介绍测试导航菜单&quot;&gt;&lt;/a&gt;介绍测试导航菜单&lt;/h2&gt;&lt;p&gt;当你开始测试工作的时候，你经常会使用Xcode的导航功能。&lt;/p&gt;
&lt;p&gt;测试导航菜单是工作区的一部分，是让你便捷的创建，管理，运行和检视测试代码。你可以点击在issue导航和debug导航中间的的图标进入测试导航菜单。当你的项目有定义测试套件，你可以在这里看到类似的导航菜单。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-18-twx-qs-1_2x.png&quot; alt=&quot;twx-qs-1_2x&quot;&gt;&lt;/p&gt;
&lt;p&gt;测试导航菜单想一个项目一样以列表的形式分级的展示了包，类和方法。这个项目是一个类似计算器的app。计算器的工程项一套工程的结构，可以看到优先级最高的&lt;code&gt;SampleCalcTests&lt;/code&gt;测试包，是为了测试应用的代码。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;Xcode只想的测试包会在测试导航菜单中展示。&lt;/p&gt;
&lt;p&gt;如果你测试时使用数据，图片和其他内容，他们可以被添加到测试包，在执行的时候使用&lt;code&gt;NSBundle&lt;/code&gt;APIs。使用&lt;code&gt;+[NSBundle bundleForClass:]&lt;/code&gt;和你的测试类时，你要确保你取回了正确的测试包和正确的数据。更多详情请看&lt;a href=&quot;https://developer.apple.com/reference/foundation/nsbundle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSBundle Class Reference&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Xcode会计划和控制构建的内容。Schemes也会操作可执行的测试的方法进行测试。你可以在测试菜单中使用Control-clicking有选择的使用或者忽略测试包，类和方法。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在视图中活动的测试包是&lt;code&gt;SampleCalcTests. SampleCalcTests&lt;/code&gt;，它包含该了一个测试包，测试包中包括9个测试方法。当你把鼠标放在列表中任意一项上，运行按钮就会出现在列表名称的右侧。测试结束后会返回成功或失败的结果给Xcode。测试开始执行的时候，这些图标会更新，给你展示测试的结果。绿色表示通过，红色表示失败。这里测试导航菜单显示的测试结果，有两项被断言为失败。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-18-twx-qs-2_2x.png&quot; alt=&quot;twx-qs-2_2x&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击列表中任意一个测试类或者测试方法，会在代码编辑器中打开对应的测试类。测试类和测试方法也会在编辑器中做上标记。测试失败会在代码编辑器中展示断言处和对应的方法。&lt;/p&gt;
&lt;p&gt;在测试菜单的底部是增加按钮和过滤控制，你可以减少展示的内容，只显示活动的测试项或者只展示失败的测试，当然，你也可以按照名称来过滤。&lt;/p&gt;
&lt;p&gt;更多测试导航菜单的详细操作，请看&lt;em&gt;Test Navigator Help&lt;/em&gt;。&lt;/p&gt;
&lt;h2 id=&quot;为你的APP增加测试方法&quot;&gt;&lt;a href=&quot;#为你的APP增加测试方法&quot; class=&quot;headerlink&quot; title=&quot;为你的APP增加测试方法&quot;&gt;&lt;/a&gt;为你的APP增加测试方法&lt;/h2&gt;&lt;p&gt;在Xcode5和以后的版本中你可以在新建app，框架和资源的时候添加一个测试的target。当你开始一个新的项目时打开测试导航菜单，你可以看到一个测试包，一个测试类和一个测试方法的模板。但是你不要使用没有测试target的Xcode版本来打开以前的项目。这里的工作流程假设一个之前的项目是没有纳入测试的。&lt;/p&gt;
&lt;h3 id=&quot;创建一个测试Target&quot;&gt;&lt;a href=&quot;#创建一个测试Target&quot; class=&quot;headerlink&quot; title=&quot;创建一个测试Target&quot;&gt;&lt;/a&gt;创建一个测试Target&lt;/h3&gt;&lt;p&gt;点击测试导航菜单左下方的增加按钮来选择新建一个&lt;code&gt;Unit Test Target&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-18-twx-qs-3_2x.png&quot; alt=&quot;twx-qs-3_2x&quot;&gt;&lt;/p&gt;
&lt;p&gt;在下一个对话框中选择OS X或者IOS&lt;code&gt;Unit Testing Bundle&lt;/code&gt;，然后点击&lt;code&gt;Next&lt;/code&gt;。会出现一个新的对话框，编辑项目名称和其他你需要的参数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-18-twx-qs-4_2x.png&quot; alt=&quot;twx-qs-4_2x&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击&lt;code&gt;Finish&lt;/code&gt;来增加你的target，在测试导航菜单师徒中包含了一个测试类的模板和两个测试方法的模板&lt;/p&gt;
&lt;h3 id=&quot;运行测试和观察结果&quot;&gt;&lt;a href=&quot;#运行测试和观察结果&quot; class=&quot;headerlink&quot; title=&quot;运行测试和观察结果&quot;&gt;&lt;/a&gt;运行测试和观察结果&lt;/h3&gt;&lt;p&gt;现在你可以为你的项目增加测试方法了。你想要开发一些有用的测试方法。但是首先，先把鼠标放到测试导航菜单的&lt;code&gt;SampleCalcTests&lt;/code&gt;上并点击运行按钮来执行所有的测试方法。测试结果会在函数名的旁边用绿色的标记标记出来，在代码编辑器中也一样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-18-twx-qs-6_2x.png&quot; alt=&quot;twx-qs-6_2x&quot;&gt;&lt;/p&gt;
&lt;p&gt;模板中的单元测试和演示的测试方法都是空的。这就是为什么他们都会被标记为成功，没有失败的断言。注意34行灰色菱形&lt;code&gt;measureBlock:&lt;/code&gt;方法。点击菱形来展示演示结果的面板。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-18-twx-qs-7_2x.png&quot; alt=&quot;twx-qs-7_2x&quot;&gt;&lt;/p&gt;
&lt;p&gt;面板允许你设置一个预期的基线和最大STDDEV参数。这些方面稍后会讨论。&lt;/p&gt;
&lt;h3 id=&quot;编辑测试案例再次运行&quot;&gt;&lt;a href=&quot;#编辑测试案例再次运行&quot; class=&quot;headerlink&quot; title=&quot;编辑测试案例再次运行&quot;&gt;&lt;/a&gt;编辑测试案例再次运行&lt;/h3&gt;&lt;p&gt;由于这个样本项目是一个计算器APP，你想要检查他能否想其他计算函数一样正确的执行加减乘除。由于测试是在app项目内部构建，你可以增加所有你愿意增加的测试环境。创建测试要做的事就是在执行单元测试的文件中增加一个函数。&lt;/p&gt;
&lt;p&gt;例如。你给&lt;code&gt;SampleCalcTests.m&lt;/code&gt;文件增加一个&lt;code&gt;#import&lt;/code&gt;和声明变量。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;lt;XCTest/XCTest.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Import the application specific header files&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;CalcViewController.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;CalcAppDelegate.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface CalcTests : XCTestCase &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// add instance variables to the CalcTests class&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@private&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSApplication       *app;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CalcAppDelegate     *appDelegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CalcViewController  *calcViewController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSView              *calcView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后给测试方法一个描述的名称，就像&lt;code&gt;testAddition&lt;/code&gt;一样，然后为方法增加一个执行的代码。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void) testAddition&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // obtain the app variables for test access&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   app                  = [NSApplication sharedApplication];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   calcViewController   = (CalcViewController*)[[NSApplication sharedApplication] delegate];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   calcView             = calcViewController.view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // perform two addition tests&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [calcViewController press:[calcView viewWithTag: 6]];  // 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [calcViewController press:[calcView viewWithTag:13]];  // +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [calcViewController press:[calcView viewWithTag: 2]];  // 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [calcViewController press:[calcView viewWithTag:12]];  // =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XCTAssertEqualObjects([calcViewController.displayField stringValue], @&amp;quot;8&amp;quot;, @&amp;quot;Part 1 failed.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [calcViewController press:[calcView viewWithTag:13]];  // +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [calcViewController press:[calcView viewWithTag: 2]];  // 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [calcViewController press:[calcView viewWithTag:12]];  // =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XCTAssertEqualObjects([calcViewController.displayField stringValue], @&amp;quot;10&amp;quot;, @&amp;quot;Part 2 failed.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意测试导航菜单中样例的测试方法，&lt;code&gt;testExample&lt;/code&gt;被替换成了&lt;code&gt;testAddition&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-18-twx-qs-8_2x.png&quot; alt=&quot;twx-qs-8_2x&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在点击测试导航菜单中的运行按钮（或者代码编辑器中的指示）来运行&lt;code&gt;testAddition&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-18-twx-qs-9_2x.png&quot; alt=&quot;twx-qs-9_2x&quot;&gt;&lt;/p&gt;
&lt;p&gt;就像你看到的一样，一个断言失败了，在测试导航菜单和代码编辑器中都高亮显示了。看源代码。Part 1成功了，是Part 2有一个问题。在测试中，错误很明显：在76行，&lt;code&gt;[calcView viewWithTag:11]&lt;/code&gt;错了。应该是&lt;code&gt;[calcView viewWithTag:12]&lt;/code&gt;。收集错误信息修复问题后，测试成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-18-twx-qs-8a_2x.png&quot; alt=&quot;twx-qs-8a_2x&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;为普通的代码使用setUp-和tearDown-方法&quot;&gt;&lt;a href=&quot;#为普通的代码使用setUp-和tearDown-方法&quot; class=&quot;headerlink&quot; title=&quot;为普通的代码使用setUp()和tearDown()方法&quot;&gt;&lt;/a&gt;为普通的代码使用setUp()和tearDown()方法&lt;/h3&gt;&lt;p&gt;Xcode为活动的测试包运行所有的测试方法一次。在这个小例子中只有一个方法执行了。它需要接受三个计算器app提供的变量对象。如果你写了四个或者五个测试方法在同样的类中。你会发现你需要为每一条测试案例输入重复的代码。XCTest框架提供你一个测试类的入口方法，&lt;code&gt;setUp&lt;/code&gt;和&lt;code&gt;tearDown&lt;/code&gt;，你可以用他们来放置每次执行测试方法的前置方法和结束方法。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;setUp&lt;/code&gt;和&lt;code&gt;tearDown&lt;/code&gt;方法很简单。从&lt;code&gt;Mac_Calc_Tests.m&lt;/code&gt;文件中的&lt;code&gt;testAddition&lt;/code&gt;代码中剪切4行&lt;code&gt;// obtain the app variable for test access&lt;/code&gt;然后粘贴他们到模板默认的&lt;code&gt;setUp&lt;/code&gt;入口方法中。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)setUp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super setUp];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Put setup code here. This method is called before the invocation of each test method in the class.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // obtain the app variables for test access&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   app                  = [NSApplication sharedApplication];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   calcViewController   = (CalcViewController*)[[NSApplication sharedApplication] delegate];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   calcView             = calcViewController.view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在使用最少重复代码增加更多的测试方法——&lt;code&gt;testSubtraction&lt;/code&gt;和其他方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-18-twx-qs-10_2x.png&quot; alt=&quot;twx-qs-10_2x&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;你能看到的这个简短的快速开始，它非常简单的给项目增加测试。这里有一些需要注意的地方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Xcode提供了大量基础的测试架构。当你为你的项目增加一个测试target时，Xcode会自动只想你的项目。会增加一个首字母为test的类，它含有一个单独的测试方法，并且可以在测试导航菜单中看到。&lt;/li&gt;
&lt;li&gt;测试导航菜单让你很容易的定位和编辑测试方法。你可以在测试导航菜单中直接运行测试方法，或者在打开的测试类中直接从代码编辑器中运行。当一个测试失败时，测试导航菜单和代码编辑器都会把失败的部分标记出来&lt;/li&gt;
&lt;li&gt;一个单独的测试方法可以包含该多个断言，结果只显示一个通过或者失败。这种方式允许你创建项目需要的简单或者复杂的测试。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setUp&lt;/code&gt;方法和&lt;code&gt;tearDown&lt;/code&gt;方法作为入口方法，能够让你把常用的代码统一的使用在方法中，保持代码的连贯性也更容易发现问题。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;原文地址：&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/02-quick_start.html#//apple_ref/doc/uid/TP40014132-CH2-SW1&quot;&gt;https://developer.apple.com/library/prerelease/content/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/02-quick_start.html#//apple_ref/doc/uid/TP40014132-CH2-SW1&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;文章导读&quot;&gt;&lt;a href=&quot;#文章导读&quot; class=&quot;headerlink&quot; title=&quot;文章导读&quot;&gt;&lt;/a&gt;文章导读&lt;/h2&gt;&lt;p&gt;本篇介绍了Xcode执行测试的方法，说明了Xcode工具如何新建、执行一个测试用例。&lt;/p&gt;
&lt;p&gt;看完之后你能学习到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如何使用Xcode来创建一个测试用例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何执行测试用例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何观察Xcode的测试结果&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="AboutTest" scheme="http://www.wengyb.com/categories/AboutTest/"/>
    
    
      <category term="测试" scheme="http://www.wengyb.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="IOS" scheme="http://www.wengyb.com/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title>《如何变得有思想》读后</title>
    <link href="http://www.wengyb.com/2016/07/18/%E3%80%8A%E5%A6%82%E4%BD%95%E5%8F%98%E5%BE%97%E6%9C%89%E6%80%9D%E6%83%B3%E3%80%8B%E8%AF%BB%E5%90%8E/"/>
    <id>http://www.wengyb.com/2016/07/18/《如何变得有思想》读后/</id>
    <published>2016-07-17T16:18:36.000Z</published>
    <updated>2016-07-17T16:19:03.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;阮一峰的新书《如何变得有思想》，零零碎碎的时间，大概花了我两三个小时吧，说是书，其实就是把阮一峰博客中的文章全部弄在一起，然后卖的一个合集，有点日记的感觉。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;二&quot;&gt;&lt;a href=&quot;#二&quot; class=&quot;headerlink&quot; title=&quot;二&quot;&gt;&lt;/a&gt;二&lt;/h2&gt;&lt;p&gt;书中的内容涉及较广，经济、计算机、数学、社会、历史、人文教育等各类话题都有。文笔很简单，就像其中一个章节中的内容描述的一样，喜欢用简短的话来描述问题，这在一般写手中是不太常见的，一般来说文章长而优雅比较能让人沉醉，也许是程序员的关系，简短的话能够更清晰的表达自己的看法。&lt;/p&gt;
&lt;h2 id=&quot;三&quot;&gt;&lt;a href=&quot;#三&quot; class=&quot;headerlink&quot; title=&quot;三&quot;&gt;&lt;/a&gt;三&lt;/h2&gt;&lt;p&gt;由于书中涉及范围广，不是一个学习的书，算是一个一个小故事，比较适合放在床头慢慢的阅读。&lt;/p&gt;
&lt;h2 id=&quot;四&quot;&gt;&lt;a href=&quot;#四&quot; class=&quot;headerlink&quot; title=&quot;四&quot;&gt;&lt;/a&gt;四&lt;/h2&gt;&lt;p&gt;读完全书能感觉到阮一峰是一个有思想，对生活有希冀的人。他自己也说了，书中的内容，算是他自己十年来的记录，&lt;/p&gt;
&lt;h2 id=&quot;五&quot;&gt;&lt;a href=&quot;#五&quot; class=&quot;headerlink&quot; title=&quot;五&quot;&gt;&lt;/a&gt;五&lt;/h2&gt;&lt;p&gt;读完书再去看阮一峰的博客，发现真是一个了不起的人，不是说多么伟大，博客中一千多篇文章展示了一个用心生活的人，坚持写博客真的是非常困难的事，能够坚持十年，确实是非常了不起。&lt;/p&gt;
&lt;h2 id=&quot;六&quot;&gt;&lt;a href=&quot;#六&quot; class=&quot;headerlink&quot; title=&quot;六&quot;&gt;&lt;/a&gt;六&lt;/h2&gt;&lt;p&gt;当然，书中有一些观点也是有问题的，但是这些观点是个人的，属于个人思想，那么有错误才是正常的，说明他也是一个平凡的人。&lt;/p&gt;
&lt;h2 id=&quot;七&quot;&gt;&lt;a href=&quot;#七&quot; class=&quot;headerlink&quot; title=&quot;七&quot;&gt;&lt;/a&gt;七&lt;/h2&gt;&lt;p&gt;看完书对我来说也是非常有版主的，今年博客写的也算比较勤，也让我发现了一些博客的新写法，原来博客可以这样写，也算是一种新收获，之前看的池建强的《MacTalk》也是类似的书，突然觉得这类书看起来也非常有意思。&lt;/p&gt;
&lt;h2 id=&quot;八&quot;&gt;&lt;a href=&quot;#八&quot; class=&quot;headerlink&quot; title=&quot;八&quot;&gt;&lt;/a&gt;八&lt;/h2&gt;&lt;p&gt;最后：书名是有点扯，如果你是一个没思想的人，那么即使你读完了，也不会变得有思想。&lt;/p&gt;
&lt;p&gt;最后的最后：标题没有漏字，本文只是我看完之后的随想，基本上不涉及书中的内容，如果你想看，直接买书吧，不贵。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;阮一峰的新书《如何变得有思想》，零零碎碎的时间，大概花了我两三个小时吧，说是书，其实就是把阮一峰博客中的文章全部弄在一起，然后卖的一个合集，有点日记的感觉。&lt;br&gt;
    
    </summary>
    
      <category term="MyTalk" scheme="http://www.wengyb.com/categories/MyTalk/"/>
    
    
  </entry>
  
  <entry>
    <title>《如何变得有思想》章节小谈</title>
    <link href="http://www.wengyb.com/2016/07/15/%E3%80%8A%E5%A6%82%E4%BD%95%E5%8F%98%E5%BE%97%E6%9C%89%E6%80%9D%E6%83%B3%E3%80%8B%E7%AB%A0%E8%8A%82%E5%B0%8F%E8%B0%88/"/>
    <id>http://www.wengyb.com/2016/07/15/《如何变得有思想》章节小谈/</id>
    <published>2016-07-15T02:35:41.000Z</published>
    <updated>2016-07-15T02:36:29.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-15-dock-1365387_1920.jpg&quot; alt=&quot;dock-1365387_1920&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;在阮一峰的博客文集《如何变得有思想》，其中一篇文章叫《决定，还是做决定》挺有意思的，文章的内容大致是表达长语言的坏处和短语言的好处。&lt;/p&gt;
&lt;h2 id=&quot;二&quot;&gt;&lt;a href=&quot;#二&quot; class=&quot;headerlink&quot; title=&quot;二&quot;&gt;&lt;/a&gt;二&lt;/h2&gt;&lt;p&gt;这其实挺有说头的，一直记得小学课文中有一句课文是这样写的：&lt;code&gt;今天天气真好，万里碧空飘着朵朵白云&lt;/code&gt;。以前我一直觉得很蛋疼，直接说&lt;code&gt;今天气晴朗就好了&lt;/code&gt;。当然，在应试教育的年代，老师说这样好，那就是好。&lt;/p&gt;
&lt;h2 id=&quot;三&quot;&gt;&lt;a href=&quot;#三&quot; class=&quot;headerlink&quot; title=&quot;三&quot;&gt;&lt;/a&gt;三&lt;/h2&gt;&lt;p&gt;当然我不否认长句子很优雅，而且我始终觉得它听起来令人享受，比如我的一个朋友说话的时候时不时来上一句，听着就很厉害的样子，听他说话就很优雅。而短句就显得通俗，不文雅。&lt;/p&gt;
&lt;h2 id=&quot;四&quot;&gt;&lt;a href=&quot;#四&quot; class=&quot;headerlink&quot; title=&quot;四&quot;&gt;&lt;/a&gt;四&lt;/h2&gt;&lt;p&gt;举个例子，很容易就看出来区别&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;生命的美丽，永远展此刻她的进取之中；就像大树的美丽，是展此刻它负势向上高耸入云的蓬勃生机中；像雄鹰的美丽，是展此刻它搏风击雨如苍天之魂的翱翔中；像江河的美丽，是展此刻它波涛汹涌一泻千里的奔流中。&lt;/p&gt;
&lt;p&gt;生命很美好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;五&quot;&gt;&lt;a href=&quot;#五&quot; class=&quot;headerlink&quot; title=&quot;五&quot;&gt;&lt;/a&gt;五&lt;/h2&gt;&lt;p&gt;阮一峰认为短句是好的。希望大家多用短句，他举了这么一个例子：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当你遇到危险的时候，你会大声喊“救命”而不是“请做出救我的动作”，否则你不死才怪。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;六&quot;&gt;&lt;a href=&quot;#六&quot; class=&quot;headerlink&quot; title=&quot;六&quot;&gt;&lt;/a&gt;六&lt;/h2&gt;&lt;p&gt;我觉得吧，这东西得辩证的来看，在传递事情的时候，用短句比较好，容易理解。但是在闲聊的时候，可以适当的使用长句，使沟通更加有趣。&lt;/p&gt;
&lt;p&gt;对，是&lt;code&gt;适当&lt;/code&gt;。相信我，长句用的太多你会没朋友的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-15-dock-1365387_1920.jpg&quot; alt=&quot;dock-1365387_1920&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="MyTalk" scheme="http://www.wengyb.com/categories/MyTalk/"/>
    
    
      <category term="个人杂谈" scheme="http://www.wengyb.com/tags/%E4%B8%AA%E4%BA%BA%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Django接受前端数据的几种方法</title>
    <link href="http://www.wengyb.com/2016/07/14/Django%E6%8E%A5%E5%8F%97%E5%89%8D%E7%AB%AF%E6%95%B0%E6%8D%AE%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://www.wengyb.com/2016/07/14/Django接受前端数据的几种方法/</id>
    <published>2016-07-14T05:28:18.000Z</published>
    <updated>2016-07-14T05:37:02.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-14-office-1209640_1920.jpg&quot; alt=&quot;office-1209640_1920&quot;&gt;&lt;/p&gt;
&lt;p&gt;菲律宾猴子真是逗，各种被国际打脸，什么乱七八糟的狗屁裁决，是中国的就是中国的，祖国领土是神圣不可侵犯的。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;测试工具箱写到一半，今天遇到了一个前后端数据交互的问题，就一起做一下整理。&lt;/p&gt;
&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;版本相关 &lt;/p&gt;
&lt;p&gt;操作系统：Mac OS X EI Caption &lt;/p&gt;
&lt;p&gt;Python版本：2.7 &lt;/p&gt;
&lt;p&gt;IDE：PyCharm&lt;/p&gt;
&lt;p&gt;Django： 1.8.2&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;注： 我测试的是&lt;code&gt;Get&lt;/code&gt;方法，&lt;code&gt;POST&lt;/code&gt;方法也同样适用&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;字符型&quot;&gt;&lt;a href=&quot;#字符型&quot; class=&quot;headerlink&quot; title=&quot;字符型&quot;&gt;&lt;/a&gt;字符型&lt;/h2&gt;&lt;p&gt;字符型的数据相对好获取。&lt;/p&gt;
&lt;p&gt;在Django的后端只要使用&lt;code&gt;exporttype = request.GET.get(&amp;quot;exporttype&amp;quot;)&lt;/code&gt;就能正常的获取到这个数据了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：在&lt;code&gt;Python2.7&lt;/code&gt;中数据是&lt;code&gt;unicode&lt;/code&gt;编码的，如果要使用，有时候需要进行转&lt;code&gt;str&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;结果示例：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Excle &amp;lt;type &lt;span class=&quot;string&quot;&gt;&#39;unicode&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;数组型&quot;&gt;&lt;a href=&quot;#数组型&quot; class=&quot;headerlink&quot; title=&quot;数组型&quot;&gt;&lt;/a&gt;数组型&lt;/h2&gt;&lt;p&gt;获取数组型的数据如果使用获取字符串的数据的方法，打出的结果是None。我们要使用这个方法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bugids = request.GET.getlist(&amp;quot;bugids[]&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样获取的数据就是数组类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意： 获取的数组中的元素是&lt;code&gt;unicode&lt;/code&gt;编码的，在某些时候使用需要转编码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;结果示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传递的url&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[14/Jul/2016 11:00:41]&amp;quot;GET /testtools/exportbug/?exporttype=Excle&amp;amp;bugids%5B%5D=102&amp;amp;bugids%5B%5D=101&amp;amp;bugids%5B%5D=100&amp;amp;bugids%5B%5D=99&amp;amp;bugids%5B%5D=98&amp;amp;bugids%5B%5D=97&amp;amp;bugids%5B%5D=96&amp;amp;bugids%5B%5D=95&amp;amp;bugids%5B%5D=94&amp;amp;bugids%5B%5D=93&amp;amp;bugids%5B%5D=92&amp;amp;bugids%5B%5D=91&amp;amp;bugids%5B%5D=90&amp;amp;bugids%5B%5D=89&amp;amp;bugids%5B%5D=88&amp;amp;bugids%5B%5D=87&amp;amp;bugids%5B%5D=86&amp;amp;bugids%5B%5D=85&amp;amp;bugids%5B%5D=84&amp;amp;bugids%5B%5D=83&amp;amp;bugids%5B%5D=82&amp;amp;bugids%5B%5D=81&amp;amp;bugids%5B%5D=80&amp;amp;bugids%5B%5D=79&amp;amp;bugids%5B%5D=78&amp;amp;bugids%5B%5D=77&amp;amp;bugids%5B%5D=76&amp;amp;bugids%5B%5D=75&amp;amp;bugids%5B%5D=74&amp;amp;bugids%5B%5D=73&amp;amp;bugids%5B%5D=72&amp;amp;bugids%5B%5D=71&amp;amp;bugids%5B%5D=70&amp;amp;bugids%5B%5D=69&amp;amp;bugids%5B%5D=68&amp;amp;bugids%5B%5D=67&amp;amp;bugids%5B%5D=66&amp;amp;bugids%5B%5D=65&amp;amp;bugids%5B%5D=64&amp;amp;bugids%5B%5D=63&amp;amp;bugids%5B%5D=62&amp;amp;bugids%5B%5D=61&amp;amp;bugids%5B%5D=60&amp;amp;bugids%5B%5D=59&amp;amp;bugids%5B%5D=58&amp;amp;bugids%5B%5D=57&amp;amp;bugids%5B%5D=56&amp;amp;bugids%5B%5D=55&amp;amp;bugids%5B%5D=54&amp;amp;bugids%5B%5D=53&amp;amp;bugids%5B%5D=52&amp;amp;bugids%5B%5D=51&amp;amp;bugids%5B%5D=50&amp;amp;bugids%5B%5D=49&amp;amp;bugids%5B%5D=48&amp;amp;bugids%5B%5D=47&amp;amp;bugids%5B%5D=46&amp;amp;bugids%5B%5D=45&amp;amp;bugids%5B%5D=44&amp;amp;bugids%5B%5D=43&amp;amp;bugids%5B%5D=42&amp;amp;bugids%5B%5D=41&amp;amp;bugids%5B%5D=40&amp;amp;bugids%5B%5D=39&amp;amp;bugids%5B%5D=38&amp;amp;bugids%5B%5D=37&amp;amp;bugids%5B%5D=36&amp;amp;bugids%5B%5D=35&amp;amp;bugids%5B%5D=34&amp;amp;bugids%5B%5D=33&amp;amp;bugids%5B%5D=32&amp;amp;bugids%5B%5D=31&amp;amp;bugids%5B%5D=30&amp;amp;bugids%5B%5D=29&amp;amp;bugids%5B%5D=28&amp;amp;bugids%5B%5D=27&amp;amp;bugids%5B%5D=26&amp;amp;bugids%5B%5D=25&amp;amp;bugids%5B%5D=24&amp;amp;bugids%5B%5D=23&amp;amp;bugids%5B%5D=22&amp;amp;bugids%5B%5D=21&amp;amp;bugids%5B%5D=20&amp;amp;bugids%5B%5D=19&amp;amp;bugids%5B%5D=18&amp;amp;bugids%5B%5D=17&amp;amp;bugids%5B%5D=16&amp;amp;bugids%5B%5D=15&amp;amp;bugids%5B%5D=14&amp;amp;bugids%5B%5D=13&amp;amp;bugids%5B%5D=12&amp;amp;bugids%5B%5D=11&amp;amp;test=%7B%22test%22%3A%22test%22%7D HTTP/1.1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;获取的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[u&amp;apos;102&amp;apos;, u&amp;apos;101&amp;apos;, u&amp;apos;100&amp;apos;, u&amp;apos;99&amp;apos;, u&amp;apos;98&amp;apos;, u&amp;apos;97&amp;apos;, u&amp;apos;96&amp;apos;, u&amp;apos;95&amp;apos;, u&amp;apos;94&amp;apos;, u&amp;apos;93&amp;apos;, u&amp;apos;92&amp;apos;, u&amp;apos;91&amp;apos;, u&amp;apos;90&amp;apos;, u&amp;apos;89&amp;apos;, u&amp;apos;88&amp;apos;, u&amp;apos;87&amp;apos;, u&amp;apos;86&amp;apos;, u&amp;apos;85&amp;apos;, u&amp;apos;84&amp;apos;, u&amp;apos;83&amp;apos;, u&amp;apos;82&amp;apos;, u&amp;apos;81&amp;apos;, u&amp;apos;80&amp;apos;, u&amp;apos;79&amp;apos;, u&amp;apos;78&amp;apos;, u&amp;apos;77&amp;apos;, u&amp;apos;76&amp;apos;, u&amp;apos;75&amp;apos;, u&amp;apos;74&amp;apos;, u&amp;apos;73&amp;apos;, u&amp;apos;72&amp;apos;, u&amp;apos;71&amp;apos;, u&amp;apos;70&amp;apos;, u&amp;apos;69&amp;apos;, u&amp;apos;68&amp;apos;, u&amp;apos;67&amp;apos;, u&amp;apos;66&amp;apos;, u&amp;apos;65&amp;apos;, u&amp;apos;64&amp;apos;, u&amp;apos;63&amp;apos;, u&amp;apos;62&amp;apos;, u&amp;apos;61&amp;apos;, u&amp;apos;60&amp;apos;, u&amp;apos;59&amp;apos;, u&amp;apos;58&amp;apos;, u&amp;apos;57&amp;apos;, u&amp;apos;56&amp;apos;, u&amp;apos;55&amp;apos;, u&amp;apos;54&amp;apos;, u&amp;apos;53&amp;apos;, u&amp;apos;52&amp;apos;, u&amp;apos;51&amp;apos;, u&amp;apos;50&amp;apos;, u&amp;apos;49&amp;apos;, u&amp;apos;48&amp;apos;, u&amp;apos;47&amp;apos;, u&amp;apos;46&amp;apos;, u&amp;apos;45&amp;apos;, u&amp;apos;44&amp;apos;, u&amp;apos;43&amp;apos;, u&amp;apos;42&amp;apos;, u&amp;apos;41&amp;apos;, u&amp;apos;40&amp;apos;, u&amp;apos;39&amp;apos;, u&amp;apos;38&amp;apos;, u&amp;apos;37&amp;apos;, u&amp;apos;36&amp;apos;, u&amp;apos;35&amp;apos;, u&amp;apos;34&amp;apos;, u&amp;apos;33&amp;apos;, u&amp;apos;32&amp;apos;, u&amp;apos;31&amp;apos;, u&amp;apos;30&amp;apos;, u&amp;apos;29&amp;apos;, u&amp;apos;28&amp;apos;, u&amp;apos;27&amp;apos;, u&amp;apos;26&amp;apos;, u&amp;apos;25&amp;apos;, u&amp;apos;24&amp;apos;, u&amp;apos;23&amp;apos;, u&amp;apos;22&amp;apos;, u&amp;apos;21&amp;apos;, u&amp;apos;20&amp;apos;, u&amp;apos;19&amp;apos;, u&amp;apos;18&amp;apos;, u&amp;apos;17&amp;apos;, u&amp;apos;16&amp;apos;, u&amp;apos;15&amp;apos;, u&amp;apos;14&amp;apos;, u&amp;apos;13&amp;apos;, u&amp;apos;12&amp;apos;, u&amp;apos;11&amp;apos;] &amp;lt;type &amp;apos;list&amp;apos;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;字典型&quot;&gt;&lt;a href=&quot;#字典型&quot; class=&quot;headerlink&quot; title=&quot;字典型&quot;&gt;&lt;/a&gt;字典型&lt;/h2&gt;&lt;p&gt;字典型数据其实可以当成字符串数据来处理，获取到对应字符串后使用&lt;code&gt;JSON&lt;/code&gt;模块做一下格式化就行了。&lt;/p&gt;
&lt;p&gt;对于前端来说，传递字典型的数据就是传递&lt;code&gt;JSON&lt;/code&gt;数据，所以使用的方法是：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;test&amp;quot;: JSON.stringify({&amp;quot;test&amp;quot;: &amp;quot;test&amp;quot;})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;结果示例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;test&amp;quot;:&amp;quot;test&amp;quot;&amp;#125; &amp;lt;type &amp;apos;unicode&amp;apos;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;相关源码&quot;&gt;&lt;a href=&quot;#相关源码&quot; class=&quot;headerlink&quot; title=&quot;相关源码&quot;&gt;&lt;/a&gt;相关源码&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Get&lt;/code&gt;方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Get&lt;/code&gt;方法是&lt;code&gt;wsgi&lt;/code&gt;里面的一个方法。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# The WSGI spec says &#39;QUERY_STRING&#39; may be absent.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        raw_query_string = get_bytes_from_wsgi(self.environ, &lt;span class=&quot;string&quot;&gt;&#39;QUERY_STRING&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; http.QueryDict(raw_query_string, encoding=self._encoding)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最终返回的是一个&lt;code&gt;http.QueryDict(raw_query_string, encoding=self._encoding)&lt;/code&gt;http的原始数据，而&lt;code&gt;QueryDict&lt;/code&gt;继承于&lt;code&gt;MultiValueDict&lt;/code&gt;，所以我们直接看&lt;code&gt;MultiValueDict&lt;/code&gt;就好了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MultiValueDict&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实源码看起来并不难。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, key, default=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Returns the last data value for the passed key. If key doesn&#39;t exist&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    or value is an empty list, then default is returned.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        val = self[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; KeyError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; val == []:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; val&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getlist&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, key, default=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Returns the list of values for the passed key. If key doesn&#39;t exist,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    then a default value is returned.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; super(MultiValueDict, self).__getitem__(key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; KeyError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; default &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__getitem__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, key)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Returns the last data value for this key, or [] if it&#39;s an empty list;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    raises KeyError if not found.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        list_ = super(MultiValueDict, self).__getitem__(key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; KeyError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; MultiValueDictKeyError(repr(key))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; list_[&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; IndexError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; []&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;getlist&lt;/code&gt;方法也就是把数据全部整合一下，返回回来。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-14-office-1209640_1920.jpg&quot; alt=&quot;office-1209640_1920&quot;&gt;&lt;/p&gt;
&lt;p&gt;菲律宾猴子真是逗，各种被国际打脸，什么乱七八糟的狗屁裁决，是中国的就是中国的，祖国领土是神圣不可侵犯的。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.wengyb.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://www.wengyb.com/tags/python/"/>
    
      <category term="Django" scheme="http://www.wengyb.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Git监控版本变动</title>
    <link href="http://www.wengyb.com/2016/07/12/Git%E7%9B%91%E6%8E%A7%E7%89%88%E6%9C%AC%E5%8F%98%E5%8A%A8/"/>
    <id>http://www.wengyb.com/2016/07/12/Git监控版本变动/</id>
    <published>2016-07-12T00:26:16.000Z</published>
    <updated>2016-07-12T00:27:54.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-12-20160710.jpg&quot; alt=&quot;20160710&quot;&gt;&lt;/p&gt;
&lt;p&gt;葡萄牙竟然获得了冠军，这真是不科学！！！！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;上一篇文章说道Git可以结合tar来自动打升级包，如果要每次去开发环境执行监控代码，那其实意义并不大，这篇文章介绍的是写一个监控程序来监控变动情况，一旦发生变动，就发邮件通知自己，然后每天定时在某个时点把更新包打出来。&lt;/p&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;思路其实很简单，就利用上一篇文章&lt;a href=&quot;http://www.wengyb.com/2016/07/07/Git结合tar自动打升级包/&quot;&gt;《Git结合tar自动打升级包》&lt;/a&gt;介绍的方法，做一个拓展就好了，流程图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-12-git自动打包流程图.png&quot; alt=&quot;git自动打包流程图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;流程中的方法&quot;&gt;&lt;a href=&quot;#流程中的方法&quot; class=&quot;headerlink&quot; title=&quot;流程中的方法&quot;&gt;&lt;/a&gt;流程中的方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;定时执行&lt;code&gt;git status -s&lt;/code&gt;来监控是否有新的改动，如果返回空，则表示没变动。&lt;/li&gt;
&lt;li&gt;发生了新的变动，就提交版本，然后邮件通知变动的内容&lt;/li&gt;
&lt;li&gt;在某个时点打上&lt;code&gt;tag&lt;/code&gt;，然后校验最后两次&lt;code&gt;tag&lt;/code&gt;的内容，把变动打出升级包，然后邮件通知&lt;/li&gt;
&lt;li&gt;如果两次&lt;code&gt;tag&lt;/code&gt;没有发生变动，就表示没有发生变化，就直接退出&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;动手&quot;&gt;&lt;a href=&quot;#动手&quot; class=&quot;headerlink&quot; title=&quot;动手&quot;&gt;&lt;/a&gt;动手&lt;/h2&gt;&lt;p&gt;理清了思路之后，整个流程很简单，就是用&lt;code&gt;Python&lt;/code&gt;来控制&lt;code&gt;Shell&lt;/code&gt;去执行&lt;code&gt;Git&lt;/code&gt;，按照流程一步一步走下来就行了。&lt;/p&gt;
&lt;h3 id=&quot;常用方法封装&quot;&gt;&lt;a href=&quot;#常用方法封装&quot; class=&quot;headerlink&quot; title=&quot;常用方法封装&quot;&gt;&lt;/a&gt;常用方法封装&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; NetEastMail &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; NetEastMail&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CommandExec&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;direExec&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, command)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		os.system(command)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;listExec&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, command)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fileobj = os.popen(command)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fileobj&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fileObjAnaNoNull&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, command)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		data = [x.strip() &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; self.listExec(command)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fileObjAnaNative&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, command)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		data = [x &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; self.listExec(command)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; data&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在整个过程中会经常用到执行命令和对命令返回值的校验，所以对这些常用的方法做一下封装。&lt;/p&gt;
&lt;p&gt;代码中的&lt;code&gt;from NetEastMail import NetEastMail&lt;/code&gt;是之前一篇文章&lt;a href=&quot;http://www.wengyb.com/2016/05/28/用Python写一个发邮件模块/&quot;&gt;《用Python写一个发邮件的模块》&lt;/a&gt;写的发邮件的方法。&lt;/p&gt;
&lt;h3 id=&quot;Git监控的处理&quot;&gt;&lt;a href=&quot;#Git监控的处理&quot; class=&quot;headerlink&quot; title=&quot;Git监控的处理&quot;&gt;&lt;/a&gt;Git监控的处理&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GitDeal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(CommandExec)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		CommandExec.__init__(self)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		self.smdl = NetEastMail.MyNetEastMail(&lt;span class=&quot;string&quot;&gt;&#39;plain&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		self.gitstatus = &lt;span class=&quot;string&quot;&gt;&quot;git status -s&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		self.gitcommit = &lt;span class=&quot;string&quot;&gt;&quot;git commit -m&#39;hlzq&amp;#123;&amp;#125;&#39;&quot;&lt;/span&gt;.format(time.strftime(&lt;span class=&quot;string&quot;&gt;&quot;%Y%m%d%H&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		self.gitadd = &lt;span class=&quot;string&quot;&gt;&quot;git add .&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		self.gittag = &lt;span class=&quot;string&quot;&gt;&quot;git tag hlzq&amp;#123;&amp;#125;&quot;&lt;/span&gt;.format(time.strftime(&lt;span class=&quot;string&quot;&gt;&quot;%Y%m%d&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		self.getnewtags = &lt;span class=&quot;string&quot;&gt;&quot;git tag&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getNewTag&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		data = [x.strip() &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; self.fileObjAnaNoNull(self.getnewtags)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tagDiff&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		new = self.getNewTag()[&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		old = self.getNewTag()[&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		diff = &lt;span class=&quot;string&quot;&gt;&quot;git diff &amp;#123;&amp;#125; &amp;#123;&amp;#125; --name-only&quot;&lt;/span&gt;.format(new, old)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		data = [x.strip() &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; self.fileObjAnaNoNull(diff)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tarUpdate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		new = self.getNewTag()[&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		old = self.getNewTag()[&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		update = &lt;span class=&quot;string&quot;&gt;&quot;git diff &amp;#123;&amp;#125; &amp;#123;&amp;#125; --name-only | xargs tar -cvf &amp;#123;&amp;#125;update.tar&quot;&lt;/span&gt;.format(new, old, time.strftime(&lt;span class=&quot;string&quot;&gt;&quot;%Y%m%d&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		self.direExec(update)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		changeText = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		theme = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; len(self.fileObjAnaNoNull(self.gitstatus)) != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			changeText = &lt;span class=&quot;string&quot;&gt;&quot;请认真核对变动信息是否正确,变动信息如下:\n\n&quot;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;.join(self.fileObjAnaNoNull(self.gitstatus))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			theme = &lt;span class=&quot;string&quot;&gt;&quot;开发环境&amp;#123;&amp;#125;发生变动,请核对变动信息&quot;&lt;/span&gt;.format(time.strftime(&lt;span class=&quot;string&quot;&gt;&quot;%Y%m%d%H&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			self.direExec(self.gitadd)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			self.direExec(self.gitcommit)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; time.strftime(&lt;span class=&quot;string&quot;&gt;&quot;%H&quot;&lt;/span&gt;) == &lt;span class=&quot;string&quot;&gt;&quot;9&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			self.direExec(self.gittag)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; len(self.tagDiff()) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				self.direExec(&lt;span class=&quot;string&quot;&gt;&quot;git tag -d &amp;#123;&amp;#125;&quot;&lt;/span&gt;.format(self.getNewTag()[&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			changeText = &lt;span class=&quot;string&quot;&gt;&quot;本次更新内容详情如下: \n\n&quot;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;.join(self.tagDiff())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			theme = &lt;span class=&quot;string&quot;&gt;&quot;Tag与更新包已经打完,请下载更新包更新到测试环境&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			self.tarUpdate()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; changeText != &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			self.smdl.sendMailByNetEastMail(changeText, theme)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;暂无变动&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到此为止，基本的代码就写完了，只要执行&lt;code&gt;Gitdeal（）中的run方法就行了&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;监控程序&quot;&gt;&lt;a href=&quot;#监控程序&quot; class=&quot;headerlink&quot; title=&quot;监控程序&quot;&gt;&lt;/a&gt;监控程序&lt;/h2&gt;&lt;p&gt;说了要自动处理，那么就一定要带一个监控程序。其实监控程序就是上面那个东东。只是少了个循环执行的东西，我比较喜欢用另外的启动程序来启动这个程序，可以在启动程序中加很多东西，简单的就比如这样：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	os.system(&lt;span class=&quot;string&quot;&gt;&quot;python gitmanager.py&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	time.sleep(&lt;span class=&quot;number&quot;&gt;3600&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;循环的时间自己是可以控制的，要实时获取数据，就把&lt;code&gt;sleep&lt;/code&gt;的时间减少就行了。&lt;/p&gt;
&lt;h2 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Python&lt;/code&gt;是一个很强大的胶水语言，学好了可以帮助工作中做很多有意义的事，可以节省大量时间来投入一些有意义的事中。&lt;/p&gt;
&lt;h2 id=&quot;巨大的坑&quot;&gt;&lt;a href=&quot;#巨大的坑&quot; class=&quot;headerlink&quot; title=&quot;巨大的坑&quot;&gt;&lt;/a&gt;巨大的坑&lt;/h2&gt;&lt;p&gt;本来应该结束了，但是在部署的时候发现了一个巨大的坑。公司的服务器是windows的，诶~~~用了才知道到底是多坑。&lt;/p&gt;
&lt;p&gt;整个流程的核心是自动打包。结果在windows上&lt;code&gt;xargs&lt;/code&gt;和&lt;code&gt;tar&lt;/code&gt;都不能用，真是坑爹。&lt;/p&gt;
&lt;p&gt;当然，也不是没办法解决，在windows上cmd要执行某个命令，那么就需要把环境变量配到&lt;code&gt;*.exe&lt;/code&gt;的路径，在windows上我发现&lt;code&gt;GitBash&lt;/code&gt;是可以使用&lt;code&gt;Linux&lt;/code&gt;的命令，那么肯定有相关的可执行文件在&lt;code&gt;Git&lt;/code&gt;安装目录下。我发现&lt;code&gt;C:\Program Files (x86)\Git\usr\bin&lt;/code&gt;路径中有大量&lt;code&gt;Linux命令的可执行文件&lt;/code&gt;，那么我只要把这个路径配到环境变量就行了，试了一下，果然成功了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-12-20160710.jpg&quot; alt=&quot;20160710&quot;&gt;&lt;/p&gt;
&lt;p&gt;葡萄牙竟然获得了冠军，这真是不科学！！！！&lt;br&gt;
    
    </summary>
    
      <category term="AboutTest" scheme="http://www.wengyb.com/categories/AboutTest/"/>
    
    
      <category term="Git" scheme="http://www.wengyb.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Python生成邀请码以及重复校验</title>
    <link href="http://www.wengyb.com/2016/07/08/Python%E7%94%9F%E6%88%90%E9%82%80%E8%AF%B7%E7%A0%81%E4%BB%A5%E5%8F%8A%E9%87%8D%E5%A4%8D%E6%A0%A1%E9%AA%8C/"/>
    <id>http://www.wengyb.com/2016/07/08/Python生成邀请码以及重复校验/</id>
    <published>2016-07-08T15:43:09.000Z</published>
    <updated>2016-07-08T15:48:01.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-08-org_20160626131921_113.jpg&quot; alt=&quot;org_20160626131921_113&quot;&gt;&lt;/p&gt;
&lt;p&gt;5S坏了，用了好几年的手机毕竟是有感情的，希望明天到的屏幕能够拯救我亲爱的5S吧&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近公司在弄一个邀请码的东西，要搞一个生成的机制，理论上这是后端开发做的事情，但是我们的前端开发也去搞了一套这个验证码的东西，有兴趣的朋友可以看看&lt;a href=&quot;http://www.jianshu.com/p/9995cc192588&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Javascript实现的一种简单的推荐码算法》&lt;/a&gt;。我也就顺带写了一个验证重复的代码，最好控制一下比如1KW不会重复就行了。&lt;/p&gt;
&lt;h2 id=&quot;验证重复&quot;&gt;&lt;a href=&quot;#验证重复&quot; class=&quot;headerlink&quot; title=&quot;验证重复&quot;&gt;&lt;/a&gt;验证重复&lt;/h2&gt;&lt;p&gt;其实验证重复的逻辑很简单，用&lt;code&gt;Python&lt;/code&gt;来处理就是几行代码的事。主要流程就是从把生成的邀请码读取到一个列表中，然后用&lt;code&gt;set&lt;/code&gt;方法去重，最后比对去重前后列表的长度，就能知道有没有重复了。&lt;/p&gt;
&lt;h2 id=&quot;代码如下&quot;&gt;&lt;a href=&quot;#代码如下&quot; class=&quot;headerlink&quot; title=&quot;代码如下&quot;&gt;&lt;/a&gt;代码如下&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start = time.time()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;string&quot;&gt;&#39;test.txt&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;r&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	data = f.readlines()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr = [x.strip() &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; data]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;old = len(arr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;new = len(set(arr))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; old&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; old == new:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;success&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end = time.time()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; end-start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码中我加上了运行时间的处理，可以观察在读取大量数据的时候的效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注 ：请不要使用以下的方式来建立列表&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;testlist = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; f.readlines():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	testlist.append(x)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;事实证明，这种方式在数据量大的情况下效率会低很多。&lt;/p&gt;
&lt;p&gt;我们来做一个测试，使用1000W条数据来处理。第一种方式的结果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;10000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;success&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5.89996790886&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第二种方式的结果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;10000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;success&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7.04926991463&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，结果也证明了我写的验证码在1KW条的情况下，不会出现重复的情况。&lt;/p&gt;
&lt;h2 id=&quot;随机邀请码生成&quot;&gt;&lt;a href=&quot;#随机邀请码生成&quot; class=&quot;headerlink&quot; title=&quot;随机邀请码生成&quot;&gt;&lt;/a&gt;随机邀请码生成&lt;/h2&gt;&lt;p&gt;一般我们看到的序列号或者邀请码长成这样的：&lt;code&gt;BKMv-c1Nf-IvRr-ZAsy&lt;/code&gt;，这种逻辑的生成也挺简单的，就是取随机的字母和数字，然后拼接起来就好了。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#coding: utf-8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; random&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;field = string.letters + string.digits&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 生成num位的随机字母或数字组成的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getSingleMa&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(num)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	singleMa = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;.join(random.sample(field, num))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; singleMa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 把num个字符串拼接起来&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getAllMa&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(num)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	AllMa = &lt;span class=&quot;string&quot;&gt;&quot;-&quot;&lt;/span&gt;.join([getSingleMa(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(num)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; AllMa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 生成num组邀请码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;outMa&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(num)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	AllMaList = [getAllMa(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(num)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; AllMaList&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	data = outMa(&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;string&quot;&gt;&quot;test.txt&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;w&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			f.write(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			f.write(&lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样本地就生成了一个名为&lt;code&gt;test.txt&lt;/code&gt;的邀请码文件，里面有10000个邀请码。&lt;/p&gt;
&lt;h2 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h2&gt;&lt;p&gt;我这种方式我验证了一下，在1KW条记录的情况下，只要有4组4个字母组成的邀请码，基本上不会出现重复的情况，我测试了大概20次，就只有一次出现了一个验证码重复。&lt;/p&gt;
&lt;p&gt;当然，1E条邀请码的情况我没有测试，毕竟电脑配置有限，如果能够使用多线程来生成多个文件，最后再合并，应该效果会快很多。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-08-org_20160626131921_113.jpg&quot; alt=&quot;org_20160626131921_113&quot;&gt;&lt;/p&gt;
&lt;p&gt;5S坏了，用了好几年的手机毕竟是有感情的，希望明天到的屏幕能够拯救我亲爱的5S吧&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.wengyb.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://www.wengyb.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Git结合tar自动打升级包</title>
    <link href="http://www.wengyb.com/2016/07/07/Git%E7%BB%93%E5%90%88tar%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%87%E7%BA%A7%E5%8C%85/"/>
    <id>http://www.wengyb.com/2016/07/07/Git结合tar自动打升级包/</id>
    <published>2016-07-07T13:35:54.000Z</published>
    <updated>2016-07-07T13:36:29.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-07-IMG_0039.png&quot; alt=&quot;IMG_0039&quot;&gt;&lt;/p&gt;
&lt;p&gt;近日武汉遭受特大洪水，仿佛又见98年特大洪灾，每次出现天灾，总是一方有难八方支援。为武汉祈福。&lt;/p&gt;
&lt;p&gt;次次灾情都有伟大的人民子弟兵站在第一线，向他们致敬。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近在看&lt;code&gt;Git&lt;/code&gt;，那么看了之后就需要用&lt;code&gt;Git&lt;/code&gt;来解决一些工作中遇到的问题，学了不能用在工作中，等于白学。&lt;/p&gt;
&lt;p&gt;这次遇到的问题是打包升级的问题，我们公司目前还处于最原始的手工打更新包的状况，每次打包都要找开发要更新的内容，非常非常的麻烦，于是我就想用学习的&lt;code&gt;Git&lt;/code&gt;来解决这个问题。&lt;/p&gt;
&lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;我们的环境有两个，一个是开发环境、另一个是测试环境，那么我希望每次在开发环境都能自动把一个周期内开发改动的内容自动打包出来。我只要&lt;code&gt;down&lt;/code&gt;下来用&lt;code&gt;ftp&lt;/code&gt;上传到测试环境就行了。&lt;/p&gt;
&lt;h2 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h2&gt;&lt;p&gt;当然，两个环境都需要装上&lt;code&gt;Git&lt;/code&gt;。装完之后我需要让两个环境的数据同步。所以要先手工处理一次，然后在两个环境打上相同的&lt;code&gt;Tag&lt;/code&gt;。以后，不管开发提交了几次改动，我只要和我上次使用的&lt;code&gt;Tag&lt;/code&gt;做比对，就能知道开发做了哪些改动&lt;/p&gt;
&lt;h2 id=&quot;自动打包&quot;&gt;&lt;a href=&quot;#自动打包&quot; class=&quot;headerlink&quot; title=&quot;自动打包&quot;&gt;&lt;/a&gt;自动打包&lt;/h2&gt;&lt;p&gt;自动打包有两个工作要做，第一步要把改动的文件抓出来，第二步要把他们打包。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抓出改动的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我使用的是diff命令，&lt;code&gt;Git&lt;/code&gt;中自带了这个功能。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git diff &amp;lt;原来的版本&amp;gt; &amp;lt;现在的版本&amp;gt; --only-name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这条命令就能抓出两个版本中不同的内容。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;README.MD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TestTools/mobile/adb.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TestTools/mobile/adbconfig.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TestTools/urls.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TestTools/views.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static/bootstrap/bootstrap.min.css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static/img/bodyBg.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static/img/bodyBg2.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static/img/bodyBg3.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static/img/test1.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static/img/test2.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static/js/androidbaseinfo.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static/js/bootstrap.min.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static/js/bug.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static/js/commonfunction.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static/js/jquery-3.0.0.min.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;templates/TestTools/base.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;templates/TestTools/mobileTest/baseinfo.html&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;比如某次我的工具箱的改动就是这些。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动打包&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在&lt;code&gt;Linux&lt;/code&gt;中，打包的命令是&lt;code&gt;tar&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tar -cvf + &amp;lt;文件名&amp;gt; + &amp;lt;打包的文件名&amp;gt;&lt;/code&gt;就可以把文件打包出来了，那么，我们第一步的操作，不就是把改动的文件名输出出来么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过管道符连接两个句子&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt;中神奇的管道符可谓功能多多。完整的句子如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git diff fff3e56 0685a03 --name-only | xargs tar -cvf update.tar&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样当前目录就会多出一个update.tar的压缩包。解压缩出来就是这次改动的更新包了。&lt;/p&gt;
&lt;h2 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h2&gt;&lt;p&gt;我们的环境是&lt;code&gt;Windows&lt;/code&gt;的，所以还要研究一下怎么去跑自动化。如果是&lt;code&gt;Linux&lt;/code&gt;的，那就非常简单了，写一个&lt;code&gt;shell&lt;/code&gt;脚本就能很轻松的实现自动化更新了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-07-IMG_0039.png&quot; alt=&quot;IMG_0039&quot;&gt;&lt;/p&gt;
&lt;p&gt;近日武汉遭受特大洪水，仿佛又见98年特大洪灾，每次出现天灾，总是一方有难八方支援。为武汉祈福。&lt;/p&gt;
&lt;p&gt;次次灾情都有伟大的人民子弟兵站在第一线，向他们致敬。&lt;br&gt;
    
    </summary>
    
      <category term="AboutTest" scheme="http://www.wengyb.com/categories/AboutTest/"/>
    
    
      <category term="Git" scheme="http://www.wengyb.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git学习小记——文件分块提交</title>
    <link href="http://www.wengyb.com/2016/07/03/Git%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E5%88%86%E5%9D%97%E6%8F%90%E4%BA%A4/"/>
    <id>http://www.wengyb.com/2016/07/03/Git学习小记——文件分块提交/</id>
    <published>2016-07-03T08:16:57.000Z</published>
    <updated>2016-07-03T08:18:19.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-03-de3a0cf6eb61abffb6e02d79d5c51bb4.jpg&quot; alt=&quot;de3a0cf6eb61abffb6e02d79d5c51bb4&quot;&gt;&lt;/p&gt;
&lt;p&gt;真的是非常难得的周末啊，好不容易可以静下心来慢慢的学习，慢慢的整理一些东西。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;第一次见到Git的这个功能，我简直惊呆了。尤其是我这种非专业开发人员，常年线性撸代码，简直就是福音啊！&lt;/p&gt;
&lt;h2 id=&quot;二&quot;&gt;&lt;a href=&quot;#二&quot; class=&quot;headerlink&quot; title=&quot;二&quot;&gt;&lt;/a&gt;二&lt;/h2&gt;&lt;p&gt;我们来做一个实验，首先先在本地生成一个&lt;code&gt;git仓库&lt;/code&gt;，建立一个文件叫做&lt;code&gt;file&lt;/code&gt;.里面的内容是五行A。如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SvenWeng@wengyanbin:~/Desktop/gittest|master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;⇒  echo a &amp;gt; file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SvenWeng@wengyanbin:~/Desktop/gittest|master⚡&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;⇒  echo a &amp;gt;&amp;gt; file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SvenWeng@wengyanbin:~/Desktop/gittest|master⚡&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;⇒  echo a &amp;gt;&amp;gt; file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SvenWeng@wengyanbin:~/Desktop/gittest|master⚡&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;⇒  echo a &amp;gt;&amp;gt; file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SvenWeng@wengyanbin:~/Desktop/gittest|master⚡&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;⇒  echo a &amp;gt;&amp;gt; file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SvenWeng@wengyanbin:~/Desktop/gittest|master⚡&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;⇒  cat file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在把我们的文件提交。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SvenWeng@wengyanbin:~/Desktop/gittest|master⚡&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;⇒  git add file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SvenWeng@wengyanbin:~/Desktop/gittest|master⚡&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;⇒  git commit -am&amp;apos;init&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[master (root-commit) a3e5e97] init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 1 file changed, 5 insertions(+)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; create mode 100644 file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;三&quot;&gt;&lt;a href=&quot;#三&quot; class=&quot;headerlink&quot; title=&quot;三&quot;&gt;&lt;/a&gt;三&lt;/h2&gt;&lt;p&gt;提交文件之后，我们对文件做一些修改。修改内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;diff --git a/file b/file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index 72e1fe3..a39bec5 100644&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- a/file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+++ b/file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@@ -1,5 +1,5 @@&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+abc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一行，把a变成了ab,第五行，我把a变成了abc。那么就存在两个地方修改，现在要把这两个地方修改分次提交上去。&lt;/p&gt;
&lt;h2 id=&quot;四&quot;&gt;&lt;a href=&quot;#四&quot; class=&quot;headerlink&quot; title=&quot;四&quot;&gt;&lt;/a&gt;四&lt;/h2&gt;&lt;p&gt;我们使用&lt;code&gt;git add -p&lt;/code&gt;。得到如下结果：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SvenWeng@wengyanbin:~/Desktop/gittest|master⚡&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;⇒  git add -p&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;diff --git a/file b/file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index 72e1fe3..a39bec5 100644&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- a/file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+++ b/file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@@ -1,5 +1,5 @@&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+abc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Stage this hunk [y,n,q,a,d,/,s,e,?]?&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后一句&lt;code&gt;Stage this hunk [y,n,q,a,d,/,s,e,?]?&lt;/code&gt;是让我们选择一种方式，我们选择&lt;code&gt;s&lt;/code&gt;，表示我们要做&lt;code&gt;拆分（split）&lt;/code&gt;。拆分之后，我们可以查看拆分的内容。输入&lt;code&gt;g&lt;/code&gt;可以查看拆分的区块：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Stage this hunk [y,n,q,a,d,/,j,J,g,e,?]? g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  1:  -1,3 +1,4          +ab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2:  -1,5 +2,4          -a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  go to which hunk?&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后一句&lt;code&gt;go to which hunk?&lt;/code&gt;是问我们跳转到哪个区块。我们选择1。&lt;/p&gt;
&lt;p&gt;进入1之后，我们选择&lt;code&gt;y&lt;/code&gt;表示提交这一块。选择&lt;code&gt;y&lt;/code&gt;之后，会吧第二个区块展示给我们看，这个时候我们输入&lt;code&gt;q&lt;/code&gt;表示退出。然后我们提交，这时会出现一个很有意思的情况，我们看这个：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SvenWeng@wengyanbin:~/Desktop/gittest|master⚡&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;⇒  git status -s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MM file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;file&lt;/code&gt;这个文件一部分在暂存区，一部分在修改区&lt;/p&gt;
&lt;h2 id=&quot;五&quot;&gt;&lt;a href=&quot;#五&quot; class=&quot;headerlink&quot; title=&quot;五&quot;&gt;&lt;/a&gt;五&lt;/h2&gt;&lt;p&gt;我们做一次提交查看一次不同:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;diff --git a/file b/file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index fc27ec6..a39bec5 100644&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- a/file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+++ b/file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@@ -2,5 +2,4 @@ ab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+abc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在就之后一处修改暂未提交了。我们再次提交。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;git log&lt;/code&gt;查看一下提交的记录：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;commit a0804d4aa4fa413c74c6f03e9fb938036b4d1a8d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Author: 翁彦彬 &amp;lt;diandianhanbin@gmail.com&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Date:   Sun Jul 3 15:39:17 2016 +0800&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hunk2 commit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit 85e1635c6542b47d40ea74dacfce3ba68dfaa677&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Author: 翁彦彬 &amp;lt;diandianhanbin@gmail.com&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Date:   Sun Jul 3 15:36:35 2016 +0800&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hunk1 commit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit a3e5e97a6e7eaacc2acdcf5fc20c7947b168d587&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Author: 翁彦彬 &amp;lt;diandianhanbin@gmail.com&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Date:   Sun Jul 3 15:24:06 2016 +0800&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以很清楚的看到，我们提交了三次，第一次是init，第二次是hunk1 commit，第三次是hunk2 commit。&lt;/p&gt;
&lt;h2 id=&quot;六&quot;&gt;&lt;a href=&quot;#六&quot; class=&quot;headerlink&quot; title=&quot;六&quot;&gt;&lt;/a&gt;六&lt;/h2&gt;&lt;p&gt;当然，我们也可以查看每次提交的不同的具体位置。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;git show head -2&lt;/code&gt;表示查看近两次提交的不同点。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;commit a0804d4aa4fa413c74c6f03e9fb938036b4d1a8d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Author: 翁彦彬 &amp;lt;diandianhanbin@gmail.com&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Date:   Sun Jul 3 15:39:17 2016 +0800&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hunk2 commit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;diff --git a/file b/file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index fc27ec6..a39bec5 100644&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- a/file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+++ b/file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@@ -2,5 +2,4 @@ ab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+abc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit 85e1635c6542b47d40ea74dacfce3ba68dfaa677&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Author: 翁彦彬 &amp;lt;diandianhanbin@gmail.com&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Date:   Sun Jul 3 15:36:35 2016 +0800&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hunk1 commit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;diff --git a/file b/file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index 72e1fe3..fc27ec6 100644&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- a/file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+++ b/file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@@ -1,3 +1,4 @@&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以很清晰的看到，hunk1修改的是第一行我把a变成ab的结果。hunk2是我把a变成abc的结果。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/2016-07-03-de3a0cf6eb61abffb6e02d79d5c51bb4.jpg&quot; alt=&quot;de3a0cf6eb61abffb6e02d79d5c51bb4&quot;&gt;&lt;/p&gt;
&lt;p&gt;真的是非常难得的周末啊，好不容易可以静下心来慢慢的学习，慢慢的整理一些东西。&lt;br&gt;
    
    </summary>
    
      <category term="AboutTest" scheme="http://www.wengyb.com/categories/AboutTest/"/>
    
    
      <category term="Git" scheme="http://www.wengyb.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Java+Mac+Selenium入门</title>
    <link href="http://www.wengyb.com/2016/07/03/Java-Mac-Selenium%E5%85%A5%E9%97%A8/"/>
    <id>http://www.wengyb.com/2016/07/03/Java-Mac-Selenium入门/</id>
    <published>2016-07-03T05:26:21.000Z</published>
    <updated>2016-07-03T05:27:24.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近在看Java的一些基础知识，因为Selenium是支持各种语言的，所以我想用java+Selenium来试水一下，虽然Mac也是可以正常的支持Java和Selenium，但是实际操作起来，有那么些不同，这些不同就会导致刚开始根本进行不下去，我也花了差不多1小时左右才正式跑通Demo。说实话，网络上关于Mac+Java+Selenium的说明实在是太少了。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;版本相关 &lt;/p&gt;
&lt;p&gt;操作系统：Mac OS X EI Caption &lt;/p&gt;
&lt;p&gt;IDE：Eclipse&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;与Python的区别&quot;&gt;&lt;a href=&quot;#与Python的区别&quot; class=&quot;headerlink&quot; title=&quot;与Python的区别&quot;&gt;&lt;/a&gt;与Python的区别&lt;/h2&gt;&lt;p&gt;我们都知道，用Python来跑同Selenium真的太简单了，使用Pip安装好Selenium，然后直接引入就可以使用了，但是Java不同，Java要先导入架包，然后初始化&lt;code&gt;driver&lt;/code&gt;路径，然后才是正常的书写。&lt;/p&gt;
&lt;h2 id=&quot;配置环境&quot;&gt;&lt;a href=&quot;#配置环境&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h2&gt;&lt;h3 id=&quot;下载架包&quot;&gt;&lt;a href=&quot;#下载架包&quot; class=&quot;headerlink&quot; title=&quot;下载架包&quot;&gt;&lt;/a&gt;下载架包&lt;/h3&gt;&lt;p&gt;JDK那些我就不多说了，去Selenium官网上下架包，需要下三个文件。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;|____selenium-java-2.53.0-srcs.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|____selenium-java-2.53.0.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|____selenium-server-standalone-2.53.0.jar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对，是三个文件，最后一个&lt;code&gt;selenium-server-standalone-2.53.0.jar&lt;/code&gt;是非常关键的，因为导入架包就是要导入这个东西。&lt;/p&gt;
&lt;h3 id=&quot;eclipse配置架包&quot;&gt;&lt;a href=&quot;#eclipse配置架包&quot; class=&quot;headerlink&quot; title=&quot;eclipse配置架包&quot;&gt;&lt;/a&gt;eclipse配置架包&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/D1017B9B-861B-4E5C-AFB7-E5F784B03065.png&quot; alt=&quot;buildpath&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;引入架包&quot;&gt;&lt;a href=&quot;#引入架包&quot; class=&quot;headerlink&quot; title=&quot;引入架包&quot;&gt;&lt;/a&gt;引入架包&lt;/h3&gt;&lt;p&gt;导入成功之后，需要在代码中引用&lt;code&gt;Selenium&lt;/code&gt;包和驱动，我使用的是Chrome来执行，因此我的引入代码是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.openqa.selenium.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.openqa.selenium.chrome.ChromeDriver;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;初始化Driver&quot;&gt;&lt;a href=&quot;#初始化Driver&quot; class=&quot;headerlink&quot; title=&quot;初始化Driver&quot;&gt;&lt;/a&gt;初始化&lt;code&gt;Driver&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;在代码中，我们需要初始化&lt;code&gt;Driver&lt;/code&gt;，方法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;System.setProperty(&lt;span class=&quot;string&quot;&gt;&quot;webdriver.chrome.driver&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;/Users/SvenWeng/PycharmProjects/chromedriver&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一个参数，你使用chrome就这样写，没啥好纠结的。第二个参数是你的chromedriver的路径。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源码的处理&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String key, String value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    checkKey(key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SecurityManager sm = getSecurityManager();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sm != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sm.checkPermission(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PropertyPermission(key,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            SecurityConstants.PROPERTY_WRITE_ACTION));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (String) props.setProperty(key, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实际上是一个代理的过程。&lt;/p&gt;
&lt;h2 id=&quot;正常的逻辑代码&quot;&gt;&lt;a href=&quot;#正常的逻辑代码&quot; class=&quot;headerlink&quot; title=&quot;正常的逻辑代码&quot;&gt;&lt;/a&gt;正常的逻辑代码&lt;/h2&gt;&lt;p&gt;在写正常的逻辑代码的时候，我又感觉到了java的面向对象设计——一些都是对象。用&lt;code&gt;Python&lt;/code&gt;写的时候并没有这么强烈的感觉。不多说了，上完整的代码。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.openqa.selenium.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.openqa.selenium.chrome.ChromeDriver;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SearchSelenium&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.setProperty(&lt;span class=&quot;string&quot;&gt;&quot;webdriver.chrome.driver&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;/Users/SvenWeng/PycharmProjects/chromedriver&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		WebDriver driver = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ChromeDriver();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		driver.get(&lt;span class=&quot;string&quot;&gt;&quot;http://youdao.com&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		WebElement element = driver.findElement(By.id(&lt;span class=&quot;string&quot;&gt;&quot;translateContent&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		element.sendKeys(&lt;span class=&quot;string&quot;&gt;&quot;selenium&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		element.submit();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		driver.quit();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h2&gt;&lt;p&gt;同样，应该算是一个科普贴吧，用Mac上手Java+Selenium的朋友可以参考一下，本文没有很深的学习内容，仅作为一个入门的知识科普，希望刚入门的可以少走弯路。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近在看Java的一些基础知识，因为Selenium是支持各种语言的，所以我想用java+Selenium来试水一下，虽然Mac也是可以正常的支持Java和Selenium，但是实际操作起来，有那么些不同，这些不同就会导致刚开始根本进行不下去，我也花了差不多1小时左右才正式跑通Demo。说实话，网络上关于Mac+Java+Selenium的说明实在是太少了。&lt;br&gt;
    
    </summary>
    
      <category term="AboutTest" scheme="http://www.wengyb.com/categories/AboutTest/"/>
    
    
      <category term="测试" scheme="http://www.wengyb.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Java" scheme="http://www.wengyb.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Django开发博博客（十二）—优化导航条的处理</title>
    <link href="http://www.wengyb.com/2016/07/01/Django%E5%BC%80%E5%8F%91%E5%8D%9A%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E2%80%94%E4%BC%98%E5%8C%96%E5%AF%BC%E8%88%AA%E6%9D%A1%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <id>http://www.wengyb.com/2016/07/01/Django开发博博客（十二）—优化导航条的处理/</id>
    <published>2016-07-01T09:02:12.000Z</published>
    <updated>2016-07-01T09:02:56.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在之前的开发过程中，博客的每一个栏位内容都是写死的、固定的，这样会有很多坏处，比如一开始我写的导航内容只有&lt;code&gt;Python&lt;/code&gt;、&lt;code&gt;有关测试&lt;/code&gt;、&lt;code&gt;个人杂谈&lt;/code&gt;、&lt;code&gt;测试人生&lt;/code&gt;和&lt;code&gt;留言板&lt;/code&gt;，那么随着我阅读的资料越来越多，我写的文章内容的广度已经很大了，这些分类不够用，那么每次加一些东西都要重新加页面，再加逻辑，使用起来就非常笨重，因此需要对导航这块进行页面的优化。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;版本相关 &lt;/p&gt;
&lt;p&gt;操作系统：Mac OS X EI Caption &lt;/p&gt;
&lt;p&gt;Python版本：2.7 &lt;/p&gt;
&lt;p&gt;IDE：PyCharm&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;要实现的是可以任意加导航的内容，而不需要修改后台的处理逻辑，那么就必须要做一个参数化处理。&lt;/p&gt;
&lt;p&gt;导航栏点击后，传递参数给后台，后台根据这个参数，进行内容的筛选和返回，前端根据返回的内容进行页面展示。&lt;/p&gt;
&lt;h2 id=&quot;views-py&quot;&gt;&lt;a href=&quot;#views-py&quot; class=&quot;headerlink&quot; title=&quot;views.py&quot;&gt;&lt;/a&gt;views.py&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;views.py&lt;/code&gt;中把原来的每个页面定制的方法删了。使用如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;article_list&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(request, list_type, page)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    page = int(page)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pages = [x &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, get_pages(list_type) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end = pages[&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    content_list = BlogBody.objects.filter(blog_type=list_type).order_by(&lt;span class=&quot;string&quot;&gt;&#39;-blog_timestamp&#39;&lt;/span&gt;)[(page - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) * &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;: page * &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; page&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; get_pages(list_type) &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; render(request, &lt;span class=&quot;string&quot;&gt;&#39;blog/article_list.html&#39;&lt;/span&gt;, &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;content_list&#39;&lt;/span&gt;: content_list,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                          &lt;span class=&quot;string&quot;&gt;&#39;list_type&#39;&lt;/span&gt;: list_type,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                          &lt;span class=&quot;string&quot;&gt;&#39;pages&#39;&lt;/span&gt;: pages,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                          &lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;: end,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                          &lt;span class=&quot;string&quot;&gt;&#39;page&#39;&lt;/span&gt;: page,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                          &lt;span class=&quot;string&quot;&gt;&#39;errmsg&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;OK&#39;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; render(request, &lt;span class=&quot;string&quot;&gt;&#39;blog/article_list.html&#39;&lt;/span&gt;, &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;content_list&#39;&lt;/span&gt;: content_list,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                          &lt;span class=&quot;string&quot;&gt;&#39;list_type&#39;&lt;/span&gt;: list_type,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                          &lt;span class=&quot;string&quot;&gt;&#39;pages&#39;&lt;/span&gt;: pages,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                          &lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;: end,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                          &lt;span class=&quot;string&quot;&gt;&#39;errmsg&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;faile&#39;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样的处理方式就非常简单了，需要从&lt;code&gt;url&lt;/code&gt;中获取两个参数，一个是&lt;code&gt;list_type&lt;/code&gt;这个参数用来查询数据库，通过这个类别来查询数据库的文章列表。另一个是&lt;code&gt;page&lt;/code&gt;，这个参数用来处理分页的逻辑。&lt;/p&gt;
&lt;h2 id=&quot;前端页面&quot;&gt;&lt;a href=&quot;#前端页面&quot; class=&quot;headerlink&quot; title=&quot;前端页面&quot;&gt;&lt;/a&gt;前端页面&lt;/h2&gt;&lt;p&gt;参数这样处理之前，需要给每一个新增的导航条重写一个页面，然后继承&lt;code&gt;base.html&lt;/code&gt;。这样处理之后，只要在前端的&lt;code&gt;url&lt;/code&gt;跳转参数加上相关信息，就能够非常简单的处理。相关增加的内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;nav navbar-nav navbar-right&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;python&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;% url &#39;article_list&#39; &#39;python&#39; &#39;1&#39; %&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Python&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;% url &#39;article_list&#39; &#39;test&#39; &#39;1&#39; %&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;有关测试&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;mytalk&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;% url &#39;article_list&#39; &#39;mytalk&#39; &#39;1&#39; %&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;个人杂谈&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;diary&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;% url &#39;article_list&#39; &#39;diary&#39; &#39;1&#39; %&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;测试人生&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;role&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;presentation&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;dropdown&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;dropdown-toggle&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-toggle&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;dropdown&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;role&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;aria-haspopup=&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;aria-expanded&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;其他技术 &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;caret&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;dropdown-menu&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;% url &#39;article_list&#39; &#39;git&#39; &#39;1&#39; %&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Git&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;% url &#39;article_list&#39; &#39;java&#39; &#39;1&#39; %&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Java&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--&amp;lt;li&amp;gt;&amp;lt;a href=&quot;&amp;#123;% url &#39;article_list&#39; &#39;ios&#39; &#39;1&#39;%&amp;#125;&quot;&amp;gt;IOS&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;leavemessage&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;% url &#39;message&#39; %&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;留言板&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;role&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;presentation&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;dropdown&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;dropdown-toggle&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-toggle&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;dropdown&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;role&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;aria-haspopup=&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;aria-expanded&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;寒彬小数据 &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;caret&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;dropdown-menu&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;% url &#39;weather&#39; %&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;天气资讯&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下次新增导航条的时候，只要在这里新增内容就行了，新增的时候带上两个 参数，一个是类型，一个是分页用的1。所有的后端代码都不需要变动。非常的方便。&lt;/p&gt;
&lt;h2 id=&quot;后记&quot;&gt;&lt;a href=&quot;#后记&quot; class=&quot;headerlink&quot; title=&quot;后记&quot;&gt;&lt;/a&gt;后记&lt;/h2&gt;&lt;p&gt;随着学习的不断深入，是需要不断的增加内容的，后续我们还可以做标签云，归档等功能，实现一个完整的博客功能。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在之前的开发过程中，博客的每一个栏位内容都是写死的、固定的，这样会有很多坏处，比如一开始我写的导航内容只有&lt;code&gt;Python&lt;/code&gt;、&lt;code&gt;有关测试&lt;/code&gt;、&lt;code&gt;个人杂谈&lt;/code&gt;、&lt;code&gt;测试人生&lt;/code&gt;和&lt;code&gt;留言板&lt;/code&gt;，那么随着我阅读的资料越来越多，我写的文章内容的广度已经很大了，这些分类不够用，那么每次加一些东西都要重新加页面，再加逻辑，使用起来就非常笨重，因此需要对导航这块进行页面的优化。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.wengyb.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://www.wengyb.com/tags/python/"/>
    
      <category term="Django" scheme="http://www.wengyb.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>JS实现回到顶部按钮</title>
    <link href="http://www.wengyb.com/2016/06/30/JS%E5%AE%9E%E7%8E%B0%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8%E6%8C%89%E9%92%AE/"/>
    <id>http://www.wengyb.com/2016/06/30/JS实现回到顶部按钮/</id>
    <published>2016-06-30T13:20:32.000Z</published>
    <updated>2016-06-30T13:21:59.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;今天在写我的测试工具箱，我突然发现一个问题，好像所有页面都存在这样的问题：页面内容过长导致想要返回页面顶部的时候非常麻烦，所以我想通过JS来实现一个返回顶部的按钮。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;二&quot;&gt;&lt;a href=&quot;#二&quot; class=&quot;headerlink&quot; title=&quot;二&quot;&gt;&lt;/a&gt;二&lt;/h2&gt;&lt;p&gt;当然，作为半桶水的JS开发人员，让我自己写肯定是完不成的，那么就应该好好的使用Google和百度。&lt;/p&gt;
&lt;p&gt;在我找的过程中我发现有很多方法，不过看起来都很花哨，我只想要一个最简单的方法。&lt;/p&gt;
&lt;h2 id=&quot;三&quot;&gt;&lt;a href=&quot;#三&quot; class=&quot;headerlink&quot; title=&quot;三&quot;&gt;&lt;/a&gt;三&lt;/h2&gt;&lt;p&gt;最后还是我旁边的前端开发给了我结果，代码如下，做一个记录。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $(function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $(window).scroll(function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if ($(this).scrollTop() != 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                $(&amp;quot;#toTop&amp;quot;).fadeIn();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                $(&amp;quot;#toTop&amp;quot;).fadeOut();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $(&amp;quot;body&amp;quot;).append(&amp;quot;&amp;lt;div id=\&amp;quot;toTop\&amp;quot; style=\&amp;quot;border:1px solid #444;background:#333;color:#fff;text-align:center;padding:10px 13px 7px 13px;position:fixed;bottom:10px;right:10px;cursor:pointer;display:none;font-family:verdana;font-size:22px;\&amp;quot;&amp;gt;^&amp;lt;/div&amp;gt;&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $(&amp;quot;#toTop&amp;quot;).click(function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $(&amp;quot;body,html&amp;quot;).animate(&amp;#123;scrollTop: 0&amp;#125;, 800);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;四&quot;&gt;&lt;a href=&quot;#四&quot; class=&quot;headerlink&quot; title=&quot;四&quot;&gt;&lt;/a&gt;四&lt;/h2&gt;&lt;p&gt;我的工具箱的&lt;code&gt;base.html&lt;/code&gt;页面上放入这个方法，那么所有的页面，只要超过一个屏幕，就会自动在右下角出现一个返回顶部的按钮，使用起来非常爽，也不需要依赖外部的资源。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;今天在写我的测试工具箱，我突然发现一个问题，好像所有页面都存在这样的问题：页面内容过长导致想要返回页面顶部的时候非常麻烦，所以我想通过JS来实现一个返回顶部的按钮。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.wengyb.com/categories/Python/"/>
    
    
      <category term="Django" scheme="http://www.wengyb.com/tags/Django/"/>
    
      <category term="javascript" scheme="http://www.wengyb.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Python+MongoDB自增键值的实现</title>
    <link href="http://www.wengyb.com/2016/06/17/Python-MongoDB%E8%87%AA%E5%A2%9E%E9%94%AE%E5%80%BC%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.wengyb.com/2016/06/17/Python-MongoDB自增键值的实现/</id>
    <published>2016-06-17T14:19:53.000Z</published>
    <updated>2016-06-17T14:20:59.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近在写一个测试工具箱，里面有一个bug记录系统，因为后台我是用Django和MongoDB来实现的，就遇到了一个问题，要如何实现一个自增的字段。&lt;/p&gt;
&lt;p&gt;传统的关系型数据库要实现起来是非常容易，只要直接设置一个自增字段就行了，插入数据时不用管这个键值，只管自己处理的数据就行了，会自动实现自增的功能，但是非关系型数据库好像没有这个功能（或者我不知道）。百度之后发现都是MongoDB的设置方法，并不是我想要的。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;解决思路&quot;&gt;&lt;a href=&quot;#解决思路&quot; class=&quot;headerlink&quot; title=&quot;解决思路&quot;&gt;&lt;/a&gt;解决思路&lt;/h2&gt;&lt;p&gt;百度没有找到好的思路，那就只能自己解决了，我的想法很简单，字段不会自增，那么就自己造一个自增的方案。&lt;/p&gt;
&lt;p&gt;我发现在MongoDB修改的方法有一个&lt;code&gt;$inc&lt;/code&gt;的方法.可以实现&lt;code&gt;int&lt;/code&gt;类型的自增。那么就非常简单了，自己建一个&lt;code&gt;collection&lt;/code&gt;，然后这个&lt;code&gt;collection&lt;/code&gt;中只有一个&lt;code&gt;int&lt;/code&gt;的字段，每次插入数据时来这个&lt;code&gt;collection&lt;/code&gt;取&lt;code&gt;ID&lt;/code&gt;就行了，然后再调用一下&lt;code&gt;$inc&lt;/code&gt;方法，那么就实现了自动自增的方案。&lt;/p&gt;
&lt;h2 id=&quot;代码展示&quot;&gt;&lt;a href=&quot;#代码展示&quot; class=&quot;headerlink&quot; title=&quot;代码展示&quot;&gt;&lt;/a&gt;代码展示&lt;/h2&gt;&lt;p&gt;Python实现起来还是非常简单的Python和Django非常契合。代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bugPlus&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	bugID自增&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	:return:True&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	db = self.__chooseCollection(config.COLLECTION[&lt;span class=&quot;string&quot;&gt;&#39;bugID&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	db.update_one(&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;bugID&quot;&lt;/span&gt;: self.getBugID()&amp;#125;, &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;$inc&quot;&lt;/span&gt;: &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;bugID&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每次插入成功后，调用这个方法就可以实现ID的自增。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getBugID&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	获取当前bug的最新编号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	:return:None&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	db = self.__chooseCollection(config.COLLECTION[&lt;span class=&quot;string&quot;&gt;&#39;bugID&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rst = db.find_one()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; rst[&lt;span class=&quot;string&quot;&gt;&#39;bugID&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在插入之前，调用这个方法，这样每次插入数据时插入的ID就是实现自增的ID。&lt;/p&gt;
&lt;h2 id=&quot;缺点&quot;&gt;&lt;a href=&quot;#缺点&quot; class=&quot;headerlink&quot; title=&quot;缺点&quot;&gt;&lt;/a&gt;缺点&lt;/h2&gt;&lt;p&gt;当然，这种方式还是有缺点的，调用的时候多使用了方法，因此需要确认方法是否执行成功，否则会导致下次插入的ID不是自增后的数据。每次多调了一次方法，会导致性能下降。&lt;/p&gt;
&lt;h2 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h2&gt;&lt;p&gt;如果有更好的实现方式，请告诉我！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近在写一个测试工具箱，里面有一个bug记录系统，因为后台我是用Django和MongoDB来实现的，就遇到了一个问题，要如何实现一个自增的字段。&lt;/p&gt;
&lt;p&gt;传统的关系型数据库要实现起来是非常容易，只要直接设置一个自增字段就行了，插入数据时不用管这个键值，只管自己处理的数据就行了，会自动实现自增的功能，但是非关系型数据库好像没有这个功能（或者我不知道）。百度之后发现都是MongoDB的设置方法，并不是我想要的。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.wengyb.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://www.wengyb.com/tags/python/"/>
    
      <category term="MongoDB" scheme="http://www.wengyb.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>这段时间关于网络方面的学习</title>
    <link href="http://www.wengyb.com/2016/06/12/%E8%BF%99%E6%AE%B5%E6%97%B6%E9%97%B4%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E6%96%B9%E9%9D%A2%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.wengyb.com/2016/06/12/这段时间关于网络方面的学习/</id>
    <published>2016-06-12T15:44:17.000Z</published>
    <updated>2016-06-12T15:45:02.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;作为一个有追求的测试人员，不断学习是必须的，现在是互联网时代，那么了解互联网之间的通讯方式是非常有必要的，不论是web端还是移动端，基本上都是通过TCP/IP进行交互的。那么TCP/IP应该是一个硬技能。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;二&quot;&gt;&lt;a href=&quot;#二&quot; class=&quot;headerlink&quot; title=&quot;二&quot;&gt;&lt;/a&gt;二&lt;/h2&gt;&lt;p&gt;一般来说，每门知识都有一本“圣经”，《TCP/IP详解》无疑是这方面的宝典。如果能够完整的看下来，当然是最好的，但是这类“圣经”讲解的都非常细，内容相对枯燥，很难从头到尾把它看完。所以我选择了另一种方式学习。&lt;/p&gt;
&lt;h2 id=&quot;三&quot;&gt;&lt;a href=&quot;#三&quot; class=&quot;headerlink&quot; title=&quot;三&quot;&gt;&lt;/a&gt;三&lt;/h2&gt;&lt;p&gt;HTTP是TCP/IP协议的应用。日常生活中接触的也比较多，从HTTP入门再去学习TCP/IP，有了一些概念，学起来很多地方就可以脑补，就不会那么困难了。&lt;/p&gt;
&lt;p&gt;《图解TCP/IP(第5版)》是日本人写的一本介绍HTTP的书籍，我觉得入门学习非常棒，书中有着大量的图片来描述枯燥无味的通讯。我是去年把这本书看完的，把它阅读完之后，基本上对于HTTP就有了一个基本的了解，起码一些比较专业的术语、概念等有了一个比较清晰的认识。&lt;/p&gt;
&lt;h2 id=&quot;四&quot;&gt;&lt;a href=&quot;#四&quot; class=&quot;headerlink&quot; title=&quot;四&quot;&gt;&lt;/a&gt;四&lt;/h2&gt;&lt;p&gt;学完HTTP基础的概念之后，试着找了一些抓包工具来看HTTP在实际生活中的内容，理论上比较火的抓包工具是Fiddler，不过Fiddler那个界面内容太多，再去学习Fiddler整个学习曲线就变了，而且也浪费太多时间，Mac电脑上用Charles比较简单，Charles也自动规避了那些复杂的底层的通讯内容，只展示网络请求。&lt;/p&gt;
&lt;p&gt;学以致用，最近工作中和微博合作的时候，通过Charles成功的定位了问题。好吧，就是把锅甩给微博了。&lt;/p&gt;
&lt;h2 id=&quot;五&quot;&gt;&lt;a href=&quot;#五&quot; class=&quot;headerlink&quot; title=&quot;五&quot;&gt;&lt;/a&gt;五&lt;/h2&gt;&lt;p&gt;随着工作的深入，慢慢的要往底层学习，HTTP在某些时候已经不能满足工作需要了，而且Charles有时候也不顶用，比如我们的APP本来就是代理的方式来处理数据，再通过Charles代理，会出现页面无法展示的错误，而且Charles只能捕捉WiFi的数据，要捕获3G/4G就无法胜任了。这个时候就需要重新找一个工具了。&lt;/p&gt;
&lt;h2 id=&quot;六&quot;&gt;&lt;a href=&quot;#六&quot; class=&quot;headerlink&quot; title=&quot;六&quot;&gt;&lt;/a&gt;六&lt;/h2&gt;&lt;p&gt;Wireshark是一个更强大的工具，并且通过Wireshark能够更深层次的学习TCP/IP，因为这些底层的数据包Wireshark也能够捕获和展示。&lt;/p&gt;
&lt;p&gt;《Wireshark数据包分析实战》是一本非常棒的书，在这个层次上满足了我的需求，Wireshark是一个非常强大的工具，如何使用它也是一个头疼的事，这本书讲解TCP/IP相关的知识就是通过Wireshark来讲解的，所以在学习TCP/IP的同时，又能够学习Wireshark。一举两得。&lt;/p&gt;
&lt;p&gt;学以致用，通过学习Wireshark，在思迪的炒股大赛项目中，成功的定位了问题。好吧，这次也是把锅甩给思迪。&lt;/p&gt;
&lt;h2 id=&quot;七&quot;&gt;&lt;a href=&quot;#七&quot; class=&quot;headerlink&quot; title=&quot;七&quot;&gt;&lt;/a&gt;七&lt;/h2&gt;&lt;p&gt;需要学习的东西还很多，TCP/IP的知识还可以更深入的学习，一些新的知识也可以插进来学习，比如苹果在本月初已经全部改为IPV6了，IPV6未来也是一个趋势，也是值得学习的方向。&lt;/p&gt;
&lt;p&gt;未来的路还很长。。。。。。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;作为一个有追求的测试人员，不断学习是必须的，现在是互联网时代，那么了解互联网之间的通讯方式是非常有必要的，不论是web端还是移动端，基本上都是通过TCP/IP进行交互的。那么TCP/IP应该是一个硬技能。&lt;br&gt;
    
    </summary>
    
      <category term="AboutTest" scheme="http://www.wengyb.com/categories/AboutTest/"/>
    
    
      <category term="测试" scheme="http://www.wengyb.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="测试人生" scheme="http://www.wengyb.com/tags/%E6%B5%8B%E8%AF%95%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>Django开发博客（十一）—跨域资源共享（CORS）</title>
    <link href="http://www.wengyb.com/2016/06/06/Django%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E2%80%94%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB%EF%BC%88CORS%EF%BC%89/"/>
    <id>http://www.wengyb.com/2016/06/06/Django开发博客（十一）—跨域资源共享（CORS）/</id>
    <published>2016-06-06T14:33:09.000Z</published>
    <updated>2016-06-06T14:35:10.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;我旁边的开发在学ReactNative，说要拿我的博客练手，顺带给我写一个Android的博客客户端。这感情好啊，这个时候就必须要给他写两个接口，一个是获取文章列表，另一个是文章的详情。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;接口&quot;&gt;&lt;a href=&quot;#接口&quot; class=&quot;headerlink&quot; title=&quot;接口&quot;&gt;&lt;/a&gt;接口&lt;/h2&gt;&lt;p&gt;说实话，写两个接口应该是非常简单的，我也是这么想的，当然，分分钟也就写出来了。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get_article&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(request, article_id)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    获取文章详情&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :param request:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :param article_id:文章ID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :return: Json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    article_view = BlogBody.objects.get(id=article_id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rst_data = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;errmsg&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;OK&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;article_title&quot;&lt;/span&gt;: article_view.blog_title,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;article_body&quot;&lt;/span&gt;: markdown.markdown(article_view.blog_body),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;article_author&quot;&lt;/span&gt;: article_view.blog_author,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; JsonResponse(rst_data, safe=&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get_article_list&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(request, list_type)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    获取文章列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :param request:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :param list_type:类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :return:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    article_list = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; list_type == &lt;span class=&quot;string&quot;&gt;&quot;all&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        article_list_all = BlogBody.objects.all()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; article_list_all:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            article_list_title = x.blog_title&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            article_list_id = x.id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            article_data = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;: article_list_title,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: article_list_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            article_list.append(article_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rst_data = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;errmsg&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;OK&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;article_list&quot;&lt;/span&gt;: article_list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; JsonResponse(rst_data, safe=&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        article_list_type = BlogBody.objects.filter(blog_type=list_type)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; article_list_type:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            article_list_title = x.blog_title&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            article_list_id = x.id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            article_data = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;: article_list_title,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: article_list_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            article_list.append(article_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rst_data = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;errmsg&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;OK&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;article_list&quot;&lt;/span&gt;: article_list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; JsonResponse(rst_data, safe=&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;URL我就不当列了，并不难写。&lt;/p&gt;
&lt;h2 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h2&gt;&lt;p&gt;身为一个测试人员，自己写完的东西肯定是要测一下的。我在本地环境调试的时候测试通过，部署上SAE之后，我自己也测了一下，并没有问题。该返回的也都返回了。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;当我把接口文档丢给开发之后，开发的反馈是，无法获取数据。这就很奇怪了，我自己测试时很正常啊，就是一个普通的http请求而已。&lt;/p&gt;
&lt;p&gt;根据开发的经验，这个是跨域调用的问题。我返回的数据必须要是CORS的数据，也就是返回头部要有Access-Control-Allow-Origin这个信息。否则只能同源调用。&lt;/p&gt;
&lt;p&gt;什么是CORS?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。&lt;/p&gt;
&lt;p&gt;整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。&lt;/p&gt;
&lt;p&gt;因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h2&gt;&lt;p&gt;Google了一下，有两种解决办法，一种是使用JSONP来处理返回数据，看起来有点麻烦，另一种是在Http返回的时候加一个头部信息。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;response = HttpResponse()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;response[&lt;span class=&quot;string&quot;&gt;&#39;Access-Control-Allow-Origin&#39;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; response&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么问题又来了，我使用的是JsonResponse()，并不是HttpResponse()。&lt;/p&gt;
&lt;p&gt;好吧，其实两个是一样的，我们可以看JsonResponse的源码&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;JsonResponse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HttpResponse)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    An HTTP response class that consumes data to be serialized to JSON.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :param data: Data to be dumped into json. By default only ``dict`` objects&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      are allowed to be passed due to a security flaw before EcmaScript 5. See&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      the ``safe`` parameter for more information.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :param encoder: Should be an json encoder class. Defaults to&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ``django.core.serializers.json.DjangoJSONEncoder``.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    :param safe: Controls if only ``dict`` objects may be serialized. Defaults&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      to ``True``.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, data, encoder=DjangoJSONEncoder, safe=True, **kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; safe &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; isinstance(data, dict):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; TypeError(&lt;span class=&quot;string&quot;&gt;&#39;In order to allow non-dict objects to be &#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&#39;serialized set the safe parameter to False&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        kwargs.setdefault(&lt;span class=&quot;string&quot;&gt;&#39;content_type&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data = json.dumps(data, cls=encoder)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super(JsonResponse, self).__init__(content=data, **kwargs)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其他的看不懂没关系，只要看懂JsonResponse是继承于HttpResponse就行了。父类的方法，子类肯定也是可以适用的，最后的返回结果我们只要简单的修改一下就行了。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;response = JsonResponse(rst_data, safe=&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;response[&lt;span class=&quot;string&quot;&gt;&#39;Access-Control-Allow-Origin&#39;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; response&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;response = JsonResponse(rst_data, safe=&lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;response[&lt;span class=&quot;string&quot;&gt;&#39;Access-Control-Allow-Origin&#39;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; response&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样用jQuery就可以成功的跨域调用了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：没必要共享的借口就不要使用跨域资源共享，否则容易引起攻击&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;我旁边的开发在学ReactNative，说要拿我的博客练手，顺带给我写一个Android的博客客户端。这感情好啊，这个时候就必须要给他写两个接口，一个是获取文章列表，另一个是文章的详情。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.wengyb.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://www.wengyb.com/tags/python/"/>
    
      <category term="Django" scheme="http://www.wengyb.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>测试之路——记一次解决问题的过程</title>
    <link href="http://www.wengyb.com/2016/06/03/%E6%B5%8B%E8%AF%95%E4%B9%8B%E8%B7%AF%E2%80%94%E2%80%94%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>http://www.wengyb.com/2016/06/03/测试之路——记一次解决问题的过程/</id>
    <published>2016-06-02T16:23:45.000Z</published>
    <updated>2016-06-02T16:24:38.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;这段时间工作上遇到了一些并不顺心的事，供应商提供的东西太烂，而且出问题还死不承认。&lt;/p&gt;
&lt;p&gt;事情是这样的，思迪提供了一套炒股大赛的软件嵌入我们的APP，上线之后发现出现的问题挺多，最大的一个应该就是用4G网络经常会出现白屏的情况，反馈了以后他们居然说他们那边重现不出来，无法解决。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;二&quot;&gt;&lt;a href=&quot;#二&quot; class=&quot;headerlink&quot; title=&quot;二&quot;&gt;&lt;/a&gt;二&lt;/h2&gt;&lt;p&gt;这种事其实发生在谁身上都会很不爽，花了钱买了一个半成品，除了问题还不承认，但是又没有很好证据指向确实是他们的问题，他们一口咬定是我们APP这里有问题。&lt;/p&gt;
&lt;p&gt;这事就有两种处理方式了，一种是懒得管，反正这东西和我关系也不大，赚了钱也是老板的，随便了。另一种是认真钻研，把问题抓出来，直接把问题丢回给供应商。&lt;/p&gt;
&lt;h2 id=&quot;三&quot;&gt;&lt;a href=&quot;#三&quot; class=&quot;headerlink&quot; title=&quot;三&quot;&gt;&lt;/a&gt;三&lt;/h2&gt;&lt;p&gt;一般来说我是比较懒散的，并不想参合太深，反正做不做我的钱也都不会多。&lt;/p&gt;
&lt;p&gt;让我不能忍的是，我反馈的问题你竟然不认，不认就算了，竟然还反咬一口，说是我的锅，那这口气是真的忍不下了。&lt;/p&gt;
&lt;h2 id=&quot;四&quot;&gt;&lt;a href=&quot;#四&quot; class=&quot;headerlink&quot; title=&quot;四&quot;&gt;&lt;/a&gt;四&lt;/h2&gt;&lt;p&gt;忍不下归忍不下，水平确实是实实在在达不到，并不知道从哪个角度去切入这个问题。虽然说APP出问题无非就两种情况，一种是代码写的有问题，另一种是网络有问题。但是对于程序我是个半桶水，能写程序，水平有限。对于网络通讯，连半桶水都算不上了。&lt;/p&gt;
&lt;h2 id=&quot;五&quot;&gt;&lt;a href=&quot;#五&quot; class=&quot;headerlink&quot; title=&quot;五&quot;&gt;&lt;/a&gt;五&lt;/h2&gt;&lt;p&gt;术业有专攻，代码的问题还是交给专业的人士来处理，网络方面倒是可以尝试着切入，我原来使用的抓包工具Charles是通过代理的方式抓包，只能抓WiFi的数据，而这次出问题的情况是4G网络。而且出问题的环境4G速度都比较快，不存在弱网加载慢导致通讯挂的问题。&lt;/p&gt;
&lt;h2 id=&quot;六&quot;&gt;&lt;a href=&quot;#六&quot; class=&quot;headerlink&quot; title=&quot;六&quot;&gt;&lt;/a&gt;六&lt;/h2&gt;&lt;p&gt;无意中看到军爷在玩Wireshark，虽然是前端工程师，不过对于网络这方面不会比我强多少，Wireshark确实是可以抓出数据，不过由于功能太强大，抓出来的东西非常多，要有很强的专业知识去对数据包进行过滤。&lt;/p&gt;
&lt;p&gt;经过Google的帮忙，基本上掌握了Wireshark的使用方式，那么剩下的问题就是专业知识了。&lt;/p&gt;
&lt;h2 id=&quot;七&quot;&gt;&lt;a href=&quot;#七&quot; class=&quot;headerlink&quot; title=&quot;七&quot;&gt;&lt;/a&gt;七&lt;/h2&gt;&lt;p&gt;说干就干，过年买的《图解HTTP》重新翻了一遍，又去亚马逊买了一本《Wireshark数据包分析实战》花了两周时间恶补，一边翻书一遍对着抓出来的数据包实践，终于问题被我抓出来了。&lt;/p&gt;
&lt;h2 id=&quot;八&quot;&gt;&lt;a href=&quot;#八&quot; class=&quot;headerlink&quot; title=&quot;八&quot;&gt;&lt;/a&gt;八&lt;/h2&gt;&lt;p&gt;其实问题很简单，思迪的前端向后端请求数据的时候，发送了大量重复无用的垃圾数据，导致后端重置了连接，而前端得不到后端返回的数据，连接又关闭了，没有数据展示，所以出现了白屏的现象。&lt;/p&gt;
&lt;p&gt;关键的数据包如下图：&lt;br&gt;&lt;img src=&quot;http://7xsgl3.com1.z0.glb.clouddn.com/6C56B171-A68B-4688-9F3B-912F993F5B8F.png&quot; alt=&quot;数据包&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中红色部分就是连接被重置，且返回的数据包都是空的。&lt;/p&gt;
&lt;h2 id=&quot;九&quot;&gt;&lt;a href=&quot;#九&quot; class=&quot;headerlink&quot; title=&quot;九&quot;&gt;&lt;/a&gt;九&lt;/h2&gt;&lt;p&gt;在一整个过程中，导致我最终于解决问题的是思迪恶劣的态度，自身并没有很主动的想去解决问题。包括自己学写代码，很大程度上也是和开发沟通的时候很多不爽的经历。&lt;/p&gt;
&lt;p&gt;自勉一下吧，学习还是应该主动。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;这段时间工作上遇到了一些并不顺心的事，供应商提供的东西太烂，而且出问题还死不承认。&lt;/p&gt;
&lt;p&gt;事情是这样的，思迪提供了一套炒股大赛的软件嵌入我们的APP，上线之后发现出现的问题挺多，最大的一个应该就是用4G网络经常会出现白屏的情况，反馈了以后他们居然说他们那边重现不出来，无法解决。&lt;br&gt;
    
    </summary>
    
      <category term="AboutTest" scheme="http://www.wengyb.com/categories/AboutTest/"/>
    
    
      <category term="测试" scheme="http://www.wengyb.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="测试人生" scheme="http://www.wengyb.com/tags/%E6%B5%8B%E8%AF%95%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>关于测试书籍的反思</title>
    <link href="http://www.wengyb.com/2016/05/28/%E5%85%B3%E4%BA%8E%E6%B5%8B%E8%AF%95%E4%B9%A6%E7%B1%8D%E7%9A%84%E5%8F%8D%E6%80%9D/"/>
    <id>http://www.wengyb.com/2016/05/28/关于测试书籍的反思/</id>
    <published>2016-05-28T15:50:28.000Z</published>
    <updated>2016-05-28T15:51:22.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;今天收到了买来的的两本书，《Wireshark数据包分析实战(第2版) 》和《精通移动App测试实战:技术、工具和案例》，下午觉都没睡就开始啃书。啃着啃着，越来越失望，《精通移动App测试实战:技术、工具和案例》这本书我只能用一个字来形容：烂！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;二&quot;&gt;&lt;a href=&quot;#二&quot; class=&quot;headerlink&quot; title=&quot;二&quot;&gt;&lt;/a&gt;二&lt;/h2&gt;&lt;p&gt;一般来说，每一本技术书都有一定的时效性，尤其是在这个技术飞速发展的时代，本来只想买Wireshark相关的书籍，偶然间浏览到了这本书，出版时间是2016-4，做移动测试半年了，对这方面的技术知识还停留在了解的阶段，急切需要大牛的书来指点迷经。于是我毫不犹豫就买下来了。&lt;/p&gt;
&lt;h2 id=&quot;三&quot;&gt;&lt;a href=&quot;#三&quot; class=&quot;headerlink&quot; title=&quot;三&quot;&gt;&lt;/a&gt;三&lt;/h2&gt;&lt;p&gt;从目录开始看，我挑了几个我了解的东西来看，比如ADB、Monkey、MonkeyRunner、Appium以及Android性能相关的章节来看。心情从激动变为平静再变为失望。书中的内容基本上都是官网文档的翻译，作者举的例子也基本上都是官方给的。&lt;/p&gt;
&lt;p&gt;虽然本人英语很烂，但是当初为了学习这些工具，也是翻墙出去拜读过官方文档的。甚至书中还有两处（我发现了两处）错误。书的校对工作显然做的并不到位。&lt;/p&gt;
&lt;h2 id=&quot;四&quot;&gt;&lt;a href=&quot;#四&quot; class=&quot;headerlink&quot; title=&quot;四&quot;&gt;&lt;/a&gt;四&lt;/h2&gt;&lt;p&gt;书名叫《精通移动App测试实战:技术、工具和案例》，不知道作者为什么敢把“精通”这两个字放上去，书中的内容都是基础的不能再基础的知识，任何一个点拿去Google都能找出一大堆资料。又或者说在作者的眼里，懂了基础知识就是精通了？&lt;/p&gt;
&lt;h2 id=&quot;五&quot;&gt;&lt;a href=&quot;#五&quot; class=&quot;headerlink&quot; title=&quot;五&quot;&gt;&lt;/a&gt;五&lt;/h2&gt;&lt;p&gt;书中的Robotium和UI Automator两块内容我没有看，因为我不会Java，所以没有接触这两块，不过根据其他模块的内容来看，也基本上就是翻译翻译文档。&lt;/p&gt;
&lt;p&gt;这本书让我想到了上次买的《零成本实现Android/iOS自动化测试:基于Appium和Test Perfect》基本上是同一个理由（出版时间是2016-01）买的，当然，也是同一个理由失望——除了翻译官方文档还是翻译官方文档。&lt;/p&gt;
&lt;h2 id=&quot;六&quot;&gt;&lt;a href=&quot;#六&quot; class=&quot;headerlink&quot; title=&quot;六&quot;&gt;&lt;/a&gt;六&lt;/h2&gt;&lt;p&gt;曾经有论坛的朋友说买技术书一定要买国外的，国内的都是坑。当时我并不敢苟同，觉得水友是从洋媚外，现在看来，还是有一定道理的，起码我买的OREILLY的书从没失望过。&lt;/p&gt;
&lt;h2 id=&quot;七&quot;&gt;&lt;a href=&quot;#七&quot; class=&quot;headerlink&quot; title=&quot;七&quot;&gt;&lt;/a&gt;七&lt;/h2&gt;&lt;p&gt;当然，我自己通过网络渠道学习了这些东西，所以觉得这本书没什么意义，如果是一个零基础的同学来看这本书，也许会有意义。当然，也只是也许，书中Robotium、UI Automator、Appium等都是需要有一定编程基础的，零基础一样看不懂书中在说什么东西。&lt;/p&gt;
&lt;h2 id=&quot;八&quot;&gt;&lt;a href=&quot;#八&quot; class=&quot;headerlink&quot; title=&quot;八&quot;&gt;&lt;/a&gt;八&lt;/h2&gt;&lt;p&gt;话又说回来，现在移动测试的火爆和技术人才的缺乏，必然会有这种基础工具书籍的需求和市场。&lt;/p&gt;
&lt;p&gt;手工测试人员从零基础向技术转型，必然会有大量的“伸手党”，在网上经常能看到有人发帖，Appium怎么学？UI Automator怎么学？我应该学哪种编程语言？这种基础书正好填补了他们的空白。不过，不是我歧视这些“伸手党”，你想学Appium，想学UI Automator，怎么不去看官方文档？套一句TesterHome创始人Monkey的话来说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;什么？你从来不看官方文档？android是谁生的？你连亲爹妈都不看，那么你看啥？看后妈？然后抱怨怎么看不懂？你怪谁？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;九&quot;&gt;&lt;a href=&quot;#九&quot; class=&quot;headerlink&quot; title=&quot;九&quot;&gt;&lt;/a&gt;九&lt;/h2&gt;&lt;p&gt;就整个测试行业而言，其实也是挺悲哀的，只能看到各种圈热钱的书，而看不到真正有质量的书，由于准入门槛很低，导致整个测试行业存在大量底层测试人员，整个行业极度缺乏中高级人才，前几天某蛋还在群里抱怨面试了一个做了八年的测试，连MVC都不懂。&lt;/p&gt;
&lt;p&gt;科学上网了这么久，我发现测试的技术基本上只能找到从0到0.5的知识，想要从0.5到1，甚至更多，就没有比较成体系的资料可参考，只能自己去看源码。而开发的待遇普遍高于测试，如果能看得懂源码，那就直接做开发就好了，工资拿的还更多。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;今天收到了买来的的两本书，《Wireshark数据包分析实战(第2版) 》和《精通移动App测试实战:技术、工具和案例》，下午觉都没睡就开始啃书。啃着啃着，越来越失望，《精通移动App测试实战:技术、工具和案例》这本书我只能用一个字来形容：烂！&lt;br&gt;
    
    </summary>
    
      <category term="MyTalk" scheme="http://www.wengyb.com/categories/MyTalk/"/>
    
    
      <category term="个人杂谈" scheme="http://www.wengyb.com/tags/%E4%B8%AA%E4%BA%BA%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
